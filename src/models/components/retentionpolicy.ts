/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Age in seconds for automatic trimming of records older than this threshold.
 *
 * @remarks
 * If set to 0, the stream will have infinite retention.
 */
export type One = {
  /**
   * Age in seconds for automatic trimming of records older than this threshold.
   *
   * @remarks
   * If set to 0, the stream will have infinite retention.
   */
  age: number;
};

/**
 * Retention policy for the stream.
 *
 * @remarks
 * If unspecified, the default is to retain records for 7 days.
 */
export type RetentionPolicy = One;

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z
  .object({
    age: z.number().int(),
  });

/** @internal */
export type One$Outbound = {
  age: number;
};

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z
  .object({
    age: z.number().int(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
  /** @deprecated use `One$Outbound` instead. */
  export type Outbound = One$Outbound;
}

export function oneToJSON(one: One): string {
  return JSON.stringify(One$outboundSchema.parse(one));
}

export function oneFromJSON(
  jsonString: string,
): SafeParseResult<One, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One' from JSON`,
  );
}

/** @internal */
export const RetentionPolicy$inboundSchema: z.ZodType<
  RetentionPolicy,
  z.ZodTypeDef,
  unknown
> = z.lazy(() => One$inboundSchema);

/** @internal */
export type RetentionPolicy$Outbound = One$Outbound;

/** @internal */
export const RetentionPolicy$outboundSchema: z.ZodType<
  RetentionPolicy$Outbound,
  z.ZodTypeDef,
  RetentionPolicy
> = z.lazy(() => One$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetentionPolicy$ {
  /** @deprecated use `RetentionPolicy$inboundSchema` instead. */
  export const inboundSchema = RetentionPolicy$inboundSchema;
  /** @deprecated use `RetentionPolicy$outboundSchema` instead. */
  export const outboundSchema = RetentionPolicy$outboundSchema;
  /** @deprecated use `RetentionPolicy$Outbound` instead. */
  export type Outbound = RetentionPolicy$Outbound;
}

export function retentionPolicyToJSON(
  retentionPolicy: RetentionPolicy,
): string {
  return JSON.stringify(RetentionPolicy$outboundSchema.parse(retentionPolicy));
}

export function retentionPolicyFromJSON(
  jsonString: string,
): SafeParseResult<RetentionPolicy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetentionPolicy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetentionPolicy' from JSON`,
  );
}
