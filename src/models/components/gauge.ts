/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MetricUnit,
  MetricUnit$inboundSchema,
  MetricUnit$outboundSchema,
} from "./metricunit.js";

export type GaugeValues = number | number;

export type Gauge = {
  /**
   * Timeseries name.
   */
  name: string;
  unit: MetricUnit;
  /**
   * Timeseries values.
   *
   * @remarks
   *
   * Each element is a tuple containing the seconds since Unix epoch, followed by the data
   * point.
   *
   * The data point represents the value at the instant of the epoch.
   */
  values: Array<Array<number | number>>;
};

/** @internal */
export const GaugeValues$inboundSchema: z.ZodType<
  GaugeValues,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type GaugeValues$Outbound = number | number;

/** @internal */
export const GaugeValues$outboundSchema: z.ZodType<
  GaugeValues$Outbound,
  z.ZodTypeDef,
  GaugeValues
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GaugeValues$ {
  /** @deprecated use `GaugeValues$inboundSchema` instead. */
  export const inboundSchema = GaugeValues$inboundSchema;
  /** @deprecated use `GaugeValues$outboundSchema` instead. */
  export const outboundSchema = GaugeValues$outboundSchema;
  /** @deprecated use `GaugeValues$Outbound` instead. */
  export type Outbound = GaugeValues$Outbound;
}

export function gaugeValuesToJSON(gaugeValues: GaugeValues): string {
  return JSON.stringify(GaugeValues$outboundSchema.parse(gaugeValues));
}

export function gaugeValuesFromJSON(
  jsonString: string,
): SafeParseResult<GaugeValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GaugeValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GaugeValues' from JSON`,
  );
}

/** @internal */
export const Gauge$inboundSchema: z.ZodType<Gauge, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    unit: MetricUnit$inboundSchema,
    values: z.array(z.array(z.union([z.number().int(), z.number()]))),
  });

/** @internal */
export type Gauge$Outbound = {
  name: string;
  unit: string;
  values: Array<Array<number | number>>;
};

/** @internal */
export const Gauge$outboundSchema: z.ZodType<
  Gauge$Outbound,
  z.ZodTypeDef,
  Gauge
> = z.object({
  name: z.string(),
  unit: MetricUnit$outboundSchema,
  values: z.array(z.array(z.union([z.number().int(), z.number()]))),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Gauge$ {
  /** @deprecated use `Gauge$inboundSchema` instead. */
  export const inboundSchema = Gauge$inboundSchema;
  /** @deprecated use `Gauge$outboundSchema` instead. */
  export const outboundSchema = Gauge$outboundSchema;
  /** @deprecated use `Gauge$Outbound` instead. */
  export type Outbound = Gauge$Outbound;
}

export function gaugeToJSON(gauge: Gauge): string {
  return JSON.stringify(Gauge$outboundSchema.parse(gauge));
}

export function gaugeFromJSON(
  jsonString: string,
): SafeParseResult<Gauge, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Gauge$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Gauge' from JSON`,
  );
}
