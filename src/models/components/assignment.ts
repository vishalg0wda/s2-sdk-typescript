/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Explicit cell assignment, if it is owned by the account.
 */
export type Cell = {
  /**
   * Explicit cell assignment, if it is owned by the account.
   */
  cell: string;
};

/**
 * Basin scope. It should be formatted as "{cloud}:{region}", e.g. "aws:us-east-1".
 */
export type Scope = {
  /**
   * Basin scope. It should be formatted as "{cloud}:{region}", e.g. "aws:us-east-1".
   */
  scope: string;
};

/**
 * Assignment of the basin to a cloud and region, or an explicit cell.
 */
export type Assignment = Scope | Cell;

/** @internal */
export const Cell$inboundSchema: z.ZodType<Cell, z.ZodTypeDef, unknown> = z
  .object({
    cell: z.string(),
  });

/** @internal */
export type Cell$Outbound = {
  cell: string;
};

/** @internal */
export const Cell$outboundSchema: z.ZodType<Cell$Outbound, z.ZodTypeDef, Cell> =
  z.object({
    cell: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Cell$ {
  /** @deprecated use `Cell$inboundSchema` instead. */
  export const inboundSchema = Cell$inboundSchema;
  /** @deprecated use `Cell$outboundSchema` instead. */
  export const outboundSchema = Cell$outboundSchema;
  /** @deprecated use `Cell$Outbound` instead. */
  export type Outbound = Cell$Outbound;
}

export function cellToJSON(cell: Cell): string {
  return JSON.stringify(Cell$outboundSchema.parse(cell));
}

export function cellFromJSON(
  jsonString: string,
): SafeParseResult<Cell, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Cell$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Cell' from JSON`,
  );
}

/** @internal */
export const Scope$inboundSchema: z.ZodType<Scope, z.ZodTypeDef, unknown> = z
  .object({
    scope: z.string(),
  });

/** @internal */
export type Scope$Outbound = {
  scope: string;
};

/** @internal */
export const Scope$outboundSchema: z.ZodType<
  Scope$Outbound,
  z.ZodTypeDef,
  Scope
> = z.object({
  scope: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Scope$ {
  /** @deprecated use `Scope$inboundSchema` instead. */
  export const inboundSchema = Scope$inboundSchema;
  /** @deprecated use `Scope$outboundSchema` instead. */
  export const outboundSchema = Scope$outboundSchema;
  /** @deprecated use `Scope$Outbound` instead. */
  export type Outbound = Scope$Outbound;
}

export function scopeToJSON(scope: Scope): string {
  return JSON.stringify(Scope$outboundSchema.parse(scope));
}

export function scopeFromJSON(
  jsonString: string,
): SafeParseResult<Scope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Scope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Scope' from JSON`,
  );
}

/** @internal */
export const Assignment$inboundSchema: z.ZodType<
  Assignment,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Scope$inboundSchema),
  z.lazy(() => Cell$inboundSchema),
]);

/** @internal */
export type Assignment$Outbound = Scope$Outbound | Cell$Outbound;

/** @internal */
export const Assignment$outboundSchema: z.ZodType<
  Assignment$Outbound,
  z.ZodTypeDef,
  Assignment
> = z.union([
  z.lazy(() => Scope$outboundSchema),
  z.lazy(() => Cell$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Assignment$ {
  /** @deprecated use `Assignment$inboundSchema` instead. */
  export const inboundSchema = Assignment$inboundSchema;
  /** @deprecated use `Assignment$outboundSchema` instead. */
  export const outboundSchema = Assignment$outboundSchema;
  /** @deprecated use `Assignment$Outbound` instead. */
  export type Outbound = Assignment$Outbound;
}

export function assignmentToJSON(assignment: Assignment): string {
  return JSON.stringify(Assignment$outboundSchema.parse(assignment));
}

export function assignmentFromJSON(
  jsonString: string,
): SafeParseResult<Assignment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Assignment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Assignment' from JSON`,
  );
}
