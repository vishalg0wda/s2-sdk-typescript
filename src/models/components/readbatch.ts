/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SequencedRecord,
  SequencedRecord$inboundSchema,
  SequencedRecord$Outbound,
  SequencedRecord$outboundSchema,
} from "./sequencedrecord.js";
import {
  StreamPosition,
  StreamPosition$inboundSchema,
  StreamPosition$Outbound,
  StreamPosition$outboundSchema,
} from "./streamposition.js";

export type ReadBatch = {
  /**
   * Records that are durably sequenced on the stream, retrieved based on the requested criteria.
   *
   * @remarks
   * This can only be empty in response to a regular (non-SSE) read, if the request cannot be satisfied without violating an explicit limit.
   */
  records: Array<SequencedRecord>;
  tail?: StreamPosition | null | undefined;
};

/** @internal */
export const ReadBatch$inboundSchema: z.ZodType<
  ReadBatch,
  z.ZodTypeDef,
  unknown
> = z.object({
  records: z.array(SequencedRecord$inboundSchema),
  tail: z.nullable(StreamPosition$inboundSchema).optional(),
});

/** @internal */
export type ReadBatch$Outbound = {
  records: Array<SequencedRecord$Outbound>;
  tail?: StreamPosition$Outbound | null | undefined;
};

/** @internal */
export const ReadBatch$outboundSchema: z.ZodType<
  ReadBatch$Outbound,
  z.ZodTypeDef,
  ReadBatch
> = z.object({
  records: z.array(SequencedRecord$outboundSchema),
  tail: z.nullable(StreamPosition$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadBatch$ {
  /** @deprecated use `ReadBatch$inboundSchema` instead. */
  export const inboundSchema = ReadBatch$inboundSchema;
  /** @deprecated use `ReadBatch$outboundSchema` instead. */
  export const outboundSchema = ReadBatch$outboundSchema;
  /** @deprecated use `ReadBatch$Outbound` instead. */
  export type Outbound = ReadBatch$Outbound;
}

export function readBatchToJSON(readBatch: ReadBatch): string {
  return JSON.stringify(ReadBatch$outboundSchema.parse(readBatch));
}

export function readBatchFromJSON(
  jsonString: string,
): SafeParseResult<ReadBatch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadBatch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadBatch' from JSON`,
  );
}
