/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Header,
  Header$inboundSchema,
  Header$Outbound,
  Header$outboundSchema,
} from "./header.js";

/**
 * Record that is durably sequenced on a stream.
 */
export type SequencedRecord = {
  /**
   * Body of the record.
   */
  body?: string | undefined;
  /**
   * Series of name-value pairs for this record.
   */
  headers?: Array<Header> | undefined;
  seqNum: number;
  timestamp: number;
};

/** @internal */
export const SequencedRecord$inboundSchema: z.ZodType<
  SequencedRecord,
  z.ZodTypeDef,
  unknown
> = z.object({
  body: z.string().optional(),
  headers: z.array(Header$inboundSchema).optional(),
  seq_num: z.number().int(),
  timestamp: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "seq_num": "seqNum",
  });
});

/** @internal */
export type SequencedRecord$Outbound = {
  body?: string | undefined;
  headers?: Array<Header$Outbound> | undefined;
  seq_num: number;
  timestamp: number;
};

/** @internal */
export const SequencedRecord$outboundSchema: z.ZodType<
  SequencedRecord$Outbound,
  z.ZodTypeDef,
  SequencedRecord
> = z.object({
  body: z.string().optional(),
  headers: z.array(Header$outboundSchema).optional(),
  seqNum: z.number().int(),
  timestamp: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    seqNum: "seq_num",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SequencedRecord$ {
  /** @deprecated use `SequencedRecord$inboundSchema` instead. */
  export const inboundSchema = SequencedRecord$inboundSchema;
  /** @deprecated use `SequencedRecord$outboundSchema` instead. */
  export const outboundSchema = SequencedRecord$outboundSchema;
  /** @deprecated use `SequencedRecord$Outbound` instead. */
  export type Outbound = SequencedRecord$Outbound;
}

export function sequencedRecordToJSON(
  sequencedRecord: SequencedRecord,
): string {
  return JSON.stringify(SequencedRecord$outboundSchema.parse(sequencedRecord));
}

export function sequencedRecordFromJSON(
  jsonString: string,
): SafeParseResult<SequencedRecord, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SequencedRecord$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SequencedRecord' from JSON`,
  );
}
