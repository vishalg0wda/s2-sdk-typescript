/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccessTokenInfo,
  AccessTokenInfo$inboundSchema,
  AccessTokenInfo$Outbound,
  AccessTokenInfo$outboundSchema,
} from "./accesstokeninfo.js";

export type ListAccessTokensResponse = {
  /**
   * Matching access tokens.
   */
  accessTokens: Array<AccessTokenInfo>;
  /**
   * Indicates that there are more access tokens that match the criteria.
   */
  hasMore: boolean;
};

/** @internal */
export const ListAccessTokensResponse$inboundSchema: z.ZodType<
  ListAccessTokensResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  access_tokens: z.array(AccessTokenInfo$inboundSchema),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "access_tokens": "accessTokens",
    "has_more": "hasMore",
  });
});

/** @internal */
export type ListAccessTokensResponse$Outbound = {
  access_tokens: Array<AccessTokenInfo$Outbound>;
  has_more: boolean;
};

/** @internal */
export const ListAccessTokensResponse$outboundSchema: z.ZodType<
  ListAccessTokensResponse$Outbound,
  z.ZodTypeDef,
  ListAccessTokensResponse
> = z.object({
  accessTokens: z.array(AccessTokenInfo$outboundSchema),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    accessTokens: "access_tokens",
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccessTokensResponse$ {
  /** @deprecated use `ListAccessTokensResponse$inboundSchema` instead. */
  export const inboundSchema = ListAccessTokensResponse$inboundSchema;
  /** @deprecated use `ListAccessTokensResponse$outboundSchema` instead. */
  export const outboundSchema = ListAccessTokensResponse$outboundSchema;
  /** @deprecated use `ListAccessTokensResponse$Outbound` instead. */
  export type Outbound = ListAccessTokensResponse$Outbound;
}

export function listAccessTokensResponseToJSON(
  listAccessTokensResponse: ListAccessTokensResponse,
): string {
  return JSON.stringify(
    ListAccessTokensResponse$outboundSchema.parse(listAccessTokensResponse),
  );
}

export function listAccessTokensResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAccessTokensResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAccessTokensResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccessTokensResponse' from JSON`,
  );
}
