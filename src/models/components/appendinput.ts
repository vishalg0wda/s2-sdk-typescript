/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppendRecord,
  AppendRecord$inboundSchema,
  AppendRecord$Outbound,
  AppendRecord$outboundSchema,
} from "./appendrecord.js";

/**
 * Payload of an `append` request.
 */
export type AppendInput = {
  /**
   * Enforce a fencing token, which starts out as an empty string that can be overridden by a `fence` command record.
   */
  fencingToken?: string | null | undefined;
  matchSeqNum?: number | null | undefined;
  /**
   * Batch of records to append atomically, which must contain at least one record, and no more than 1000.
   *
   * @remarks
   * The total size of a batch of records may not exceed 1 MiB of metered bytes.
   */
  records: Array<AppendRecord>;
};

/** @internal */
export const AppendInput$inboundSchema: z.ZodType<
  AppendInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  fencing_token: z.nullable(z.string()).optional(),
  match_seq_num: z.nullable(z.number().int()).optional(),
  records: z.array(AppendRecord$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "fencing_token": "fencingToken",
    "match_seq_num": "matchSeqNum",
  });
});

/** @internal */
export type AppendInput$Outbound = {
  fencing_token?: string | null | undefined;
  match_seq_num?: number | null | undefined;
  records: Array<AppendRecord$Outbound>;
};

/** @internal */
export const AppendInput$outboundSchema: z.ZodType<
  AppendInput$Outbound,
  z.ZodTypeDef,
  AppendInput
> = z.object({
  fencingToken: z.nullable(z.string()).optional(),
  matchSeqNum: z.nullable(z.number().int()).optional(),
  records: z.array(AppendRecord$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    fencingToken: "fencing_token",
    matchSeqNum: "match_seq_num",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppendInput$ {
  /** @deprecated use `AppendInput$inboundSchema` instead. */
  export const inboundSchema = AppendInput$inboundSchema;
  /** @deprecated use `AppendInput$outboundSchema` instead. */
  export const outboundSchema = AppendInput$outboundSchema;
  /** @deprecated use `AppendInput$Outbound` instead. */
  export type Outbound = AppendInput$Outbound;
}

export function appendInputToJSON(appendInput: AppendInput): string {
  return JSON.stringify(AppendInput$outboundSchema.parse(appendInput));
}

export function appendInputFromJSON(
  jsonString: string,
): SafeParseResult<AppendInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppendInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppendInput' from JSON`,
  );
}
