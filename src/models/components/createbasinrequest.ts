/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BasinConfig,
  BasinConfig$inboundSchema,
  BasinConfig$Outbound,
  BasinConfig$outboundSchema,
} from "./basinconfig.js";
import {
  BasinScope,
  BasinScope$inboundSchema,
  BasinScope$outboundSchema,
} from "./basinscope.js";

export type Scope = BasinScope;

export type CreateBasinRequest = {
  config?: BasinConfig | null | undefined;
  scope?: BasinScope | undefined;
};

/** @internal */
export const Scope$inboundSchema: z.ZodType<Scope, z.ZodTypeDef, unknown> =
  BasinScope$inboundSchema;

/** @internal */
export type Scope$Outbound = string;

/** @internal */
export const Scope$outboundSchema: z.ZodType<
  Scope$Outbound,
  z.ZodTypeDef,
  Scope
> = BasinScope$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Scope$ {
  /** @deprecated use `Scope$inboundSchema` instead. */
  export const inboundSchema = Scope$inboundSchema;
  /** @deprecated use `Scope$outboundSchema` instead. */
  export const outboundSchema = Scope$outboundSchema;
  /** @deprecated use `Scope$Outbound` instead. */
  export type Outbound = Scope$Outbound;
}

export function scopeToJSON(scope: Scope): string {
  return JSON.stringify(Scope$outboundSchema.parse(scope));
}

export function scopeFromJSON(
  jsonString: string,
): SafeParseResult<Scope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Scope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Scope' from JSON`,
  );
}

/** @internal */
export const CreateBasinRequest$inboundSchema: z.ZodType<
  CreateBasinRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  config: z.nullable(BasinConfig$inboundSchema).optional(),
  scope: BasinScope$inboundSchema.optional(),
});

/** @internal */
export type CreateBasinRequest$Outbound = {
  config?: BasinConfig$Outbound | null | undefined;
  scope?: string | undefined;
};

/** @internal */
export const CreateBasinRequest$outboundSchema: z.ZodType<
  CreateBasinRequest$Outbound,
  z.ZodTypeDef,
  CreateBasinRequest
> = z.object({
  config: z.nullable(BasinConfig$outboundSchema).optional(),
  scope: BasinScope$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBasinRequest$ {
  /** @deprecated use `CreateBasinRequest$inboundSchema` instead. */
  export const inboundSchema = CreateBasinRequest$inboundSchema;
  /** @deprecated use `CreateBasinRequest$outboundSchema` instead. */
  export const outboundSchema = CreateBasinRequest$outboundSchema;
  /** @deprecated use `CreateBasinRequest$Outbound` instead. */
  export type Outbound = CreateBasinRequest$Outbound;
}

export function createBasinRequestToJSON(
  createBasinRequest: CreateBasinRequest,
): string {
  return JSON.stringify(
    CreateBasinRequest$outboundSchema.parse(createBasinRequest),
  );
}

export function createBasinRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateBasinRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBasinRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBasinRequest' from JSON`,
  );
}
