/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Check tail response.
 */
export type CheckTailResponse = {
  /**
   * Sequence number that will be assigned to the next record on the stream.
   */
  nextSeqNum: number;
};

/** @internal */
export const CheckTailResponse$inboundSchema: z.ZodType<
  CheckTailResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  next_seq_num: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "next_seq_num": "nextSeqNum",
  });
});

/** @internal */
export type CheckTailResponse$Outbound = {
  next_seq_num: number;
};

/** @internal */
export const CheckTailResponse$outboundSchema: z.ZodType<
  CheckTailResponse$Outbound,
  z.ZodTypeDef,
  CheckTailResponse
> = z.object({
  nextSeqNum: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    nextSeqNum: "next_seq_num",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckTailResponse$ {
  /** @deprecated use `CheckTailResponse$inboundSchema` instead. */
  export const inboundSchema = CheckTailResponse$inboundSchema;
  /** @deprecated use `CheckTailResponse$outboundSchema` instead. */
  export const outboundSchema = CheckTailResponse$outboundSchema;
  /** @deprecated use `CheckTailResponse$Outbound` instead. */
  export type Outbound = CheckTailResponse$Outbound;
}

export function checkTailResponseToJSON(
  checkTailResponse: CheckTailResponse,
): string {
  return JSON.stringify(
    CheckTailResponse$outboundSchema.parse(checkTailResponse),
  );
}

export function checkTailResponseFromJSON(
  jsonString: string,
): SafeParseResult<CheckTailResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckTailResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckTailResponse' from JSON`,
  );
}
