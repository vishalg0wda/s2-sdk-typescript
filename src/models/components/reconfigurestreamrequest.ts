/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StreamConfig,
  StreamConfig$inboundSchema,
  StreamConfig$Outbound,
  StreamConfig$outboundSchema,
} from "./streamconfig.js";

/**
 * Reconfigure stream request.
 */
export type ReconfigureStreamRequest = {
  config?: StreamConfig | null | undefined;
  /**
   * Specifies the pieces of configuration being updated.
   *
   * @remarks
   * See <https://protobuf.dev/reference/protobuf/google.protobuf/#field-mask>
   */
  mask: Array<string>;
};

/** @internal */
export const ReconfigureStreamRequest$inboundSchema: z.ZodType<
  ReconfigureStreamRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  config: z.nullable(StreamConfig$inboundSchema).optional(),
  mask: z.array(z.string()),
});

/** @internal */
export type ReconfigureStreamRequest$Outbound = {
  config?: StreamConfig$Outbound | null | undefined;
  mask: Array<string>;
};

/** @internal */
export const ReconfigureStreamRequest$outboundSchema: z.ZodType<
  ReconfigureStreamRequest$Outbound,
  z.ZodTypeDef,
  ReconfigureStreamRequest
> = z.object({
  config: z.nullable(StreamConfig$outboundSchema).optional(),
  mask: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReconfigureStreamRequest$ {
  /** @deprecated use `ReconfigureStreamRequest$inboundSchema` instead. */
  export const inboundSchema = ReconfigureStreamRequest$inboundSchema;
  /** @deprecated use `ReconfigureStreamRequest$outboundSchema` instead. */
  export const outboundSchema = ReconfigureStreamRequest$outboundSchema;
  /** @deprecated use `ReconfigureStreamRequest$Outbound` instead. */
  export type Outbound = ReconfigureStreamRequest$Outbound;
}

export function reconfigureStreamRequestToJSON(
  reconfigureStreamRequest: ReconfigureStreamRequest,
): string {
  return JSON.stringify(
    ReconfigureStreamRequest$outboundSchema.parse(reconfigureStreamRequest),
  );
}

export function reconfigureStreamRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReconfigureStreamRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReconfigureStreamRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReconfigureStreamRequest' from JSON`,
  );
}
