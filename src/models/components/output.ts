/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SequencedRecordBatch,
  SequencedRecordBatch$inboundSchema,
  SequencedRecordBatch$Outbound,
  SequencedRecordBatch$outboundSchema,
} from "./sequencedrecordbatch.js";

/**
 * Sequence number for the next record on this stream, in case the requested `start_seq_num` was larger.
 *
 * @remarks
 * If returned in a streaming read session, this will be a terminal reply.
 */
export type Three = {
  /**
   * Sequence number for the next record on this stream, in case the requested `start_seq_num` was larger.
   *
   * @remarks
   * If returned in a streaming read session, this will be a terminal reply.
   */
  nextSeqNum: number;
};

/**
 * Sequence number for the first record on this stream, in case the requested `start_seq_num` is smaller.
 *
 * @remarks
 * If returned in a streaming read session, this will be a terminal reply, to signal that there is uncertainty about whether some records may be omitted.
 * The client can re-establish the session starting at this sequence number.
 */
export type Output2 = {
  /**
   * Sequence number for the first record on this stream, in case the requested `start_seq_num` is smaller.
   *
   * @remarks
   * If returned in a streaming read session, this will be a terminal reply, to signal that there is uncertainty about whether some records may be omitted.
   * The client can re-establish the session starting at this sequence number.
   */
  firstSeqNum: number;
};

/**
 * Batch of records.
 *
 * @remarks
 * This batch can be empty only if a `ReadLimit` was provided in the associated read request, but the first record
 * that could have been returned would violate the limit.
 */
export type Output1 = {
  /**
   * A batch of sequenced records.
   */
  batch: SequencedRecordBatch;
};

/**
 * Reply which can be a batch of records, or a sequence number if the request could not be satisfied.
 */
export type Output = Output1 | Output2 | Three;

/** @internal */
export const Three$inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown> = z
  .object({
    next_seq_num: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      "next_seq_num": "nextSeqNum",
    });
  });

/** @internal */
export type Three$Outbound = {
  next_seq_num: number;
};

/** @internal */
export const Three$outboundSchema: z.ZodType<
  Three$Outbound,
  z.ZodTypeDef,
  Three
> = z.object({
  nextSeqNum: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    nextSeqNum: "next_seq_num",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Three$ {
  /** @deprecated use `Three$inboundSchema` instead. */
  export const inboundSchema = Three$inboundSchema;
  /** @deprecated use `Three$outboundSchema` instead. */
  export const outboundSchema = Three$outboundSchema;
  /** @deprecated use `Three$Outbound` instead. */
  export type Outbound = Three$Outbound;
}

export function threeToJSON(three: Three): string {
  return JSON.stringify(Three$outboundSchema.parse(three));
}

export function threeFromJSON(
  jsonString: string,
): SafeParseResult<Three, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Three$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Three' from JSON`,
  );
}

/** @internal */
export const Output2$inboundSchema: z.ZodType<Output2, z.ZodTypeDef, unknown> =
  z.object({
    first_seq_num: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      "first_seq_num": "firstSeqNum",
    });
  });

/** @internal */
export type Output2$Outbound = {
  first_seq_num: number;
};

/** @internal */
export const Output2$outboundSchema: z.ZodType<
  Output2$Outbound,
  z.ZodTypeDef,
  Output2
> = z.object({
  firstSeqNum: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    firstSeqNum: "first_seq_num",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Output2$ {
  /** @deprecated use `Output2$inboundSchema` instead. */
  export const inboundSchema = Output2$inboundSchema;
  /** @deprecated use `Output2$outboundSchema` instead. */
  export const outboundSchema = Output2$outboundSchema;
  /** @deprecated use `Output2$Outbound` instead. */
  export type Outbound = Output2$Outbound;
}

export function output2ToJSON(output2: Output2): string {
  return JSON.stringify(Output2$outboundSchema.parse(output2));
}

export function output2FromJSON(
  jsonString: string,
): SafeParseResult<Output2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Output2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Output2' from JSON`,
  );
}

/** @internal */
export const Output1$inboundSchema: z.ZodType<Output1, z.ZodTypeDef, unknown> =
  z.object({
    batch: SequencedRecordBatch$inboundSchema,
  });

/** @internal */
export type Output1$Outbound = {
  batch: SequencedRecordBatch$Outbound;
};

/** @internal */
export const Output1$outboundSchema: z.ZodType<
  Output1$Outbound,
  z.ZodTypeDef,
  Output1
> = z.object({
  batch: SequencedRecordBatch$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Output1$ {
  /** @deprecated use `Output1$inboundSchema` instead. */
  export const inboundSchema = Output1$inboundSchema;
  /** @deprecated use `Output1$outboundSchema` instead. */
  export const outboundSchema = Output1$outboundSchema;
  /** @deprecated use `Output1$Outbound` instead. */
  export type Outbound = Output1$Outbound;
}

export function output1ToJSON(output1: Output1): string {
  return JSON.stringify(Output1$outboundSchema.parse(output1));
}

export function output1FromJSON(
  jsonString: string,
): SafeParseResult<Output1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Output1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Output1' from JSON`,
  );
}

/** @internal */
export const Output$inboundSchema: z.ZodType<Output, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => Output1$inboundSchema),
    z.lazy(() => Output2$inboundSchema),
    z.lazy(() => Three$inboundSchema),
  ]);

/** @internal */
export type Output$Outbound =
  | Output1$Outbound
  | Output2$Outbound
  | Three$Outbound;

/** @internal */
export const Output$outboundSchema: z.ZodType<
  Output$Outbound,
  z.ZodTypeDef,
  Output
> = z.union([
  z.lazy(() => Output1$outboundSchema),
  z.lazy(() => Output2$outboundSchema),
  z.lazy(() => Three$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Output$ {
  /** @deprecated use `Output$inboundSchema` instead. */
  export const inboundSchema = Output$inboundSchema;
  /** @deprecated use `Output$outboundSchema` instead. */
  export const outboundSchema = Output$outboundSchema;
  /** @deprecated use `Output$Outbound` instead. */
  export type Outbound = Output$Outbound;
}

export function outputToJSON(output: Output): string {
  return JSON.stringify(Output$outboundSchema.parse(output));
}

export function outputFromJSON(
  jsonString: string,
): SafeParseResult<Output, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Output$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Output' from JSON`,
  );
}
