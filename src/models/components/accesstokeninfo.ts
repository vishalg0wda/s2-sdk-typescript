/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccessTokenScope,
  AccessTokenScope$inboundSchema,
  AccessTokenScope$Outbound,
  AccessTokenScope$outboundSchema,
} from "./accesstokenscope.js";

export type AccessTokenInfo = {
  /**
   * Namespace streams based on the configured stream-level scope, which must be a prefix.
   *
   * @remarks
   * Stream name arguments will be automatically prefixed, and the prefix will be stripped
   * when listing streams.
   */
  autoPrefixStreams?: boolean | undefined;
  /**
   * Expiration time in ISO 8601 format.
   *
   * @remarks
   * If not set, the expiration will be set to that of the requestor's token.
   */
  expiresAt?: string | null | undefined;
  /**
   * Access token ID.
   *
   * @remarks
   * It must be unique to the account and between 1 and 96 bytes in length.
   */
  id: string;
  scope: AccessTokenScope;
};

/** @internal */
export const AccessTokenInfo$inboundSchema: z.ZodType<
  AccessTokenInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  auto_prefix_streams: z.boolean().default(false),
  expires_at: z.nullable(z.string()).optional(),
  id: z.string(),
  scope: AccessTokenScope$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "auto_prefix_streams": "autoPrefixStreams",
    "expires_at": "expiresAt",
  });
});

/** @internal */
export type AccessTokenInfo$Outbound = {
  auto_prefix_streams: boolean;
  expires_at?: string | null | undefined;
  id: string;
  scope: AccessTokenScope$Outbound;
};

/** @internal */
export const AccessTokenInfo$outboundSchema: z.ZodType<
  AccessTokenInfo$Outbound,
  z.ZodTypeDef,
  AccessTokenInfo
> = z.object({
  autoPrefixStreams: z.boolean().default(false),
  expiresAt: z.nullable(z.string()).optional(),
  id: z.string(),
  scope: AccessTokenScope$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    autoPrefixStreams: "auto_prefix_streams",
    expiresAt: "expires_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessTokenInfo$ {
  /** @deprecated use `AccessTokenInfo$inboundSchema` instead. */
  export const inboundSchema = AccessTokenInfo$inboundSchema;
  /** @deprecated use `AccessTokenInfo$outboundSchema` instead. */
  export const outboundSchema = AccessTokenInfo$outboundSchema;
  /** @deprecated use `AccessTokenInfo$Outbound` instead. */
  export type Outbound = AccessTokenInfo$Outbound;
}

export function accessTokenInfoToJSON(
  accessTokenInfo: AccessTokenInfo,
): string {
  return JSON.stringify(AccessTokenInfo$outboundSchema.parse(accessTokenInfo));
}

export function accessTokenInfoFromJSON(
  jsonString: string,
): SafeParseResult<AccessTokenInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessTokenInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessTokenInfo' from JSON`,
  );
}
