/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RetentionPolicy,
  RetentionPolicy$inboundSchema,
  RetentionPolicy$Outbound,
  RetentionPolicy$outboundSchema,
} from "./retentionpolicy.js";
import {
  StorageClass,
  StorageClass$inboundSchema,
  StorageClass$outboundSchema,
} from "./storageclass.js";

/**
 * Stream configuration.
 */
export type StreamConfig = {
  /**
   * Controls how to handle timestamps when they are not provided by the client.
   *
   * @remarks
   * If this is false (or not set), the record's arrival time will be assigned as its timestamp.
   * If this is true, then any append without a client-specified timestamp will be rejected as invalid.
   */
  requireClientTimestamps?: boolean | null | undefined;
  retentionPolicy?: RetentionPolicy | null | undefined;
  /**
   * Storage class for recent writes.
   */
  storageClass?: StorageClass | undefined;
};

/** @internal */
export const StreamConfig$inboundSchema: z.ZodType<
  StreamConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  require_client_timestamps: z.nullable(z.boolean()).optional(),
  retention_policy: z.nullable(RetentionPolicy$inboundSchema).optional(),
  storage_class: StorageClass$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "require_client_timestamps": "requireClientTimestamps",
    "retention_policy": "retentionPolicy",
    "storage_class": "storageClass",
  });
});

/** @internal */
export type StreamConfig$Outbound = {
  require_client_timestamps?: boolean | null | undefined;
  retention_policy?: RetentionPolicy$Outbound | null | undefined;
  storage_class?: string | undefined;
};

/** @internal */
export const StreamConfig$outboundSchema: z.ZodType<
  StreamConfig$Outbound,
  z.ZodTypeDef,
  StreamConfig
> = z.object({
  requireClientTimestamps: z.nullable(z.boolean()).optional(),
  retentionPolicy: z.nullable(RetentionPolicy$outboundSchema).optional(),
  storageClass: StorageClass$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    requireClientTimestamps: "require_client_timestamps",
    retentionPolicy: "retention_policy",
    storageClass: "storage_class",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamConfig$ {
  /** @deprecated use `StreamConfig$inboundSchema` instead. */
  export const inboundSchema = StreamConfig$inboundSchema;
  /** @deprecated use `StreamConfig$outboundSchema` instead. */
  export const outboundSchema = StreamConfig$outboundSchema;
  /** @deprecated use `StreamConfig$Outbound` instead. */
  export type Outbound = StreamConfig$Outbound;
}

export function streamConfigToJSON(streamConfig: StreamConfig): string {
  return JSON.stringify(StreamConfig$outboundSchema.parse(streamConfig));
}

export function streamConfigFromJSON(
  jsonString: string,
): SafeParseResult<StreamConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamConfig' from JSON`,
  );
}
