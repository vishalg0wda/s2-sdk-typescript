/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BasinConfig,
  BasinConfig$inboundSchema,
  BasinConfig$Outbound,
  BasinConfig$outboundSchema,
} from "./basinconfig.js";

/**
 * Reconfigure basin request.
 */
export type ReconfigureBasinRequest = {
  /**
   * Basin configuration.
   */
  config: BasinConfig;
  /**
   * Specifies the pieces of configuration being updated.
   *
   * @remarks
   * See <https://protobuf.dev/reference/protobuf/google.protobuf/#field-mask>
   */
  mask: Array<string>;
};

/** @internal */
export const ReconfigureBasinRequest$inboundSchema: z.ZodType<
  ReconfigureBasinRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  config: BasinConfig$inboundSchema,
  mask: z.array(z.string()),
});

/** @internal */
export type ReconfigureBasinRequest$Outbound = {
  config: BasinConfig$Outbound;
  mask: Array<string>;
};

/** @internal */
export const ReconfigureBasinRequest$outboundSchema: z.ZodType<
  ReconfigureBasinRequest$Outbound,
  z.ZodTypeDef,
  ReconfigureBasinRequest
> = z.object({
  config: BasinConfig$outboundSchema,
  mask: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReconfigureBasinRequest$ {
  /** @deprecated use `ReconfigureBasinRequest$inboundSchema` instead. */
  export const inboundSchema = ReconfigureBasinRequest$inboundSchema;
  /** @deprecated use `ReconfigureBasinRequest$outboundSchema` instead. */
  export const outboundSchema = ReconfigureBasinRequest$outboundSchema;
  /** @deprecated use `ReconfigureBasinRequest$Outbound` instead. */
  export type Outbound = ReconfigureBasinRequest$Outbound;
}

export function reconfigureBasinRequestToJSON(
  reconfigureBasinRequest: ReconfigureBasinRequest,
): string {
  return JSON.stringify(
    ReconfigureBasinRequest$outboundSchema.parse(reconfigureBasinRequest),
  );
}

export function reconfigureBasinRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReconfigureBasinRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReconfigureBasinRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReconfigureBasinRequest' from JSON`,
  );
}
