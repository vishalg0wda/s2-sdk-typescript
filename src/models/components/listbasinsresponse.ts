/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BasinInfo,
  BasinInfo$inboundSchema,
  BasinInfo$Outbound,
  BasinInfo$outboundSchema,
} from "./basininfo.js";

export type ListBasinsResponse = {
  /**
   * Matching basins.
   */
  basins: Array<BasinInfo>;
  /**
   * Indicates that there are more basins that match the criteria.
   */
  hasMore: boolean;
};

/** @internal */
export const ListBasinsResponse$inboundSchema: z.ZodType<
  ListBasinsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  basins: z.array(BasinInfo$inboundSchema),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type ListBasinsResponse$Outbound = {
  basins: Array<BasinInfo$Outbound>;
  has_more: boolean;
};

/** @internal */
export const ListBasinsResponse$outboundSchema: z.ZodType<
  ListBasinsResponse$Outbound,
  z.ZodTypeDef,
  ListBasinsResponse
> = z.object({
  basins: z.array(BasinInfo$outboundSchema),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBasinsResponse$ {
  /** @deprecated use `ListBasinsResponse$inboundSchema` instead. */
  export const inboundSchema = ListBasinsResponse$inboundSchema;
  /** @deprecated use `ListBasinsResponse$outboundSchema` instead. */
  export const outboundSchema = ListBasinsResponse$outboundSchema;
  /** @deprecated use `ListBasinsResponse$Outbound` instead. */
  export type Outbound = ListBasinsResponse$Outbound;
}

export function listBasinsResponseToJSON(
  listBasinsResponse: ListBasinsResponse,
): string {
  return JSON.stringify(
    ListBasinsResponse$outboundSchema.parse(listBasinsResponse),
  );
}

export function listBasinsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListBasinsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBasinsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBasinsResponse' from JSON`,
  );
}
