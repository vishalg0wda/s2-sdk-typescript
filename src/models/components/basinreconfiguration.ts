/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StreamReconfiguration,
  StreamReconfiguration$inboundSchema,
  StreamReconfiguration$Outbound,
  StreamReconfiguration$outboundSchema,
} from "./streamreconfiguration.js";

export type BasinReconfiguration = {
  /**
   * Create a stream on append.
   */
  createStreamOnAppend?: boolean | null | undefined;
  /**
   * Create a stream on read.
   */
  createStreamOnRead?: boolean | null | undefined;
  defaultStreamConfig?: StreamReconfiguration | null | undefined;
};

/** @internal */
export const BasinReconfiguration$inboundSchema: z.ZodType<
  BasinReconfiguration,
  z.ZodTypeDef,
  unknown
> = z.object({
  create_stream_on_append: z.nullable(z.boolean()).optional(),
  create_stream_on_read: z.nullable(z.boolean()).optional(),
  default_stream_config: z.nullable(StreamReconfiguration$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "create_stream_on_append": "createStreamOnAppend",
    "create_stream_on_read": "createStreamOnRead",
    "default_stream_config": "defaultStreamConfig",
  });
});

/** @internal */
export type BasinReconfiguration$Outbound = {
  create_stream_on_append?: boolean | null | undefined;
  create_stream_on_read?: boolean | null | undefined;
  default_stream_config?: StreamReconfiguration$Outbound | null | undefined;
};

/** @internal */
export const BasinReconfiguration$outboundSchema: z.ZodType<
  BasinReconfiguration$Outbound,
  z.ZodTypeDef,
  BasinReconfiguration
> = z.object({
  createStreamOnAppend: z.nullable(z.boolean()).optional(),
  createStreamOnRead: z.nullable(z.boolean()).optional(),
  defaultStreamConfig: z.nullable(StreamReconfiguration$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    createStreamOnAppend: "create_stream_on_append",
    createStreamOnRead: "create_stream_on_read",
    defaultStreamConfig: "default_stream_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BasinReconfiguration$ {
  /** @deprecated use `BasinReconfiguration$inboundSchema` instead. */
  export const inboundSchema = BasinReconfiguration$inboundSchema;
  /** @deprecated use `BasinReconfiguration$outboundSchema` instead. */
  export const outboundSchema = BasinReconfiguration$outboundSchema;
  /** @deprecated use `BasinReconfiguration$Outbound` instead. */
  export type Outbound = BasinReconfiguration$Outbound;
}

export function basinReconfigurationToJSON(
  basinReconfiguration: BasinReconfiguration,
): string {
  return JSON.stringify(
    BasinReconfiguration$outboundSchema.parse(basinReconfiguration),
  );
}

export function basinReconfigurationFromJSON(
  jsonString: string,
): SafeParseResult<BasinReconfiguration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BasinReconfiguration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BasinReconfiguration' from JSON`,
  );
}
