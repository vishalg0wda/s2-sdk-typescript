/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Operation,
  Operation$inboundSchema,
  Operation$outboundSchema,
} from "./operation.js";
import {
  PermittedOperationGroups,
  PermittedOperationGroups$inboundSchema,
  PermittedOperationGroups$Outbound,
  PermittedOperationGroups$outboundSchema,
} from "./permittedoperationgroups.js";
import {
  ResourceSet,
  ResourceSet$inboundSchema,
  ResourceSet$Outbound,
  ResourceSet$outboundSchema,
} from "./resourceset.js";

export type AccessTokenScope = {
  accessTokens?: ResourceSet | null | undefined;
  basins?: ResourceSet | null | undefined;
  opGroups?: PermittedOperationGroups | null | undefined;
  /**
   * Operations allowed for the token.
   *
   * @remarks
   * A union of allowed operations and groups is used as an effective set of allowed operations.
   */
  ops?: Array<Operation> | null | undefined;
  streams?: ResourceSet | null | undefined;
};

/** @internal */
export const AccessTokenScope$inboundSchema: z.ZodType<
  AccessTokenScope,
  z.ZodTypeDef,
  unknown
> = z.object({
  access_tokens: z.nullable(ResourceSet$inboundSchema).optional(),
  basins: z.nullable(ResourceSet$inboundSchema).optional(),
  op_groups: z.nullable(PermittedOperationGroups$inboundSchema).optional(),
  ops: z.nullable(z.array(Operation$inboundSchema)).optional(),
  streams: z.nullable(ResourceSet$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "access_tokens": "accessTokens",
    "op_groups": "opGroups",
  });
});

/** @internal */
export type AccessTokenScope$Outbound = {
  access_tokens?: ResourceSet$Outbound | null | undefined;
  basins?: ResourceSet$Outbound | null | undefined;
  op_groups?: PermittedOperationGroups$Outbound | null | undefined;
  ops?: Array<string> | null | undefined;
  streams?: ResourceSet$Outbound | null | undefined;
};

/** @internal */
export const AccessTokenScope$outboundSchema: z.ZodType<
  AccessTokenScope$Outbound,
  z.ZodTypeDef,
  AccessTokenScope
> = z.object({
  accessTokens: z.nullable(ResourceSet$outboundSchema).optional(),
  basins: z.nullable(ResourceSet$outboundSchema).optional(),
  opGroups: z.nullable(PermittedOperationGroups$outboundSchema).optional(),
  ops: z.nullable(z.array(Operation$outboundSchema)).optional(),
  streams: z.nullable(ResourceSet$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    accessTokens: "access_tokens",
    opGroups: "op_groups",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessTokenScope$ {
  /** @deprecated use `AccessTokenScope$inboundSchema` instead. */
  export const inboundSchema = AccessTokenScope$inboundSchema;
  /** @deprecated use `AccessTokenScope$outboundSchema` instead. */
  export const outboundSchema = AccessTokenScope$outboundSchema;
  /** @deprecated use `AccessTokenScope$Outbound` instead. */
  export type Outbound = AccessTokenScope$Outbound;
}

export function accessTokenScopeToJSON(
  accessTokenScope: AccessTokenScope,
): string {
  return JSON.stringify(
    AccessTokenScope$outboundSchema.parse(accessTokenScope),
  );
}

export function accessTokenScopeFromJSON(
  jsonString: string,
): SafeParseResult<AccessTokenScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessTokenScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessTokenScope' from JSON`,
  );
}
