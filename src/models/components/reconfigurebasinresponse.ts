/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BasinConfig,
  BasinConfig$inboundSchema,
  BasinConfig$Outbound,
  BasinConfig$outboundSchema,
} from "./basinconfig.js";

/**
 * Reconfigure basin response.
 */
export type ReconfigureBasinResponse = {
  config?: BasinConfig | null | undefined;
};

/** @internal */
export const ReconfigureBasinResponse$inboundSchema: z.ZodType<
  ReconfigureBasinResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  config: z.nullable(BasinConfig$inboundSchema).optional(),
});

/** @internal */
export type ReconfigureBasinResponse$Outbound = {
  config?: BasinConfig$Outbound | null | undefined;
};

/** @internal */
export const ReconfigureBasinResponse$outboundSchema: z.ZodType<
  ReconfigureBasinResponse$Outbound,
  z.ZodTypeDef,
  ReconfigureBasinResponse
> = z.object({
  config: z.nullable(BasinConfig$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReconfigureBasinResponse$ {
  /** @deprecated use `ReconfigureBasinResponse$inboundSchema` instead. */
  export const inboundSchema = ReconfigureBasinResponse$inboundSchema;
  /** @deprecated use `ReconfigureBasinResponse$outboundSchema` instead. */
  export const outboundSchema = ReconfigureBasinResponse$outboundSchema;
  /** @deprecated use `ReconfigureBasinResponse$Outbound` instead. */
  export type Outbound = ReconfigureBasinResponse$Outbound;
}

export function reconfigureBasinResponseToJSON(
  reconfigureBasinResponse: ReconfigureBasinResponse,
): string {
  return JSON.stringify(
    ReconfigureBasinResponse$outboundSchema.parse(reconfigureBasinResponse),
  );
}

export function reconfigureBasinResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReconfigureBasinResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReconfigureBasinResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReconfigureBasinResponse' from JSON`,
  );
}
