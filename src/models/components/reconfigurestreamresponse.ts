/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StreamConfig,
  StreamConfig$inboundSchema,
  StreamConfig$Outbound,
  StreamConfig$outboundSchema,
} from "./streamconfig.js";

/**
 * Reconfigure stream response.
 */
export type ReconfigureStreamResponse = {
  config?: StreamConfig | null | undefined;
};

/** @internal */
export const ReconfigureStreamResponse$inboundSchema: z.ZodType<
  ReconfigureStreamResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  config: z.nullable(StreamConfig$inboundSchema).optional(),
});

/** @internal */
export type ReconfigureStreamResponse$Outbound = {
  config?: StreamConfig$Outbound | null | undefined;
};

/** @internal */
export const ReconfigureStreamResponse$outboundSchema: z.ZodType<
  ReconfigureStreamResponse$Outbound,
  z.ZodTypeDef,
  ReconfigureStreamResponse
> = z.object({
  config: z.nullable(StreamConfig$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReconfigureStreamResponse$ {
  /** @deprecated use `ReconfigureStreamResponse$inboundSchema` instead. */
  export const inboundSchema = ReconfigureStreamResponse$inboundSchema;
  /** @deprecated use `ReconfigureStreamResponse$outboundSchema` instead. */
  export const outboundSchema = ReconfigureStreamResponse$outboundSchema;
  /** @deprecated use `ReconfigureStreamResponse$Outbound` instead. */
  export type Outbound = ReconfigureStreamResponse$Outbound;
}

export function reconfigureStreamResponseToJSON(
  reconfigureStreamResponse: ReconfigureStreamResponse,
): string {
  return JSON.stringify(
    ReconfigureStreamResponse$outboundSchema.parse(reconfigureStreamResponse),
  );
}

export function reconfigureStreamResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReconfigureStreamResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReconfigureStreamResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReconfigureStreamResponse' from JSON`,
  );
}
