/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MetricUnit,
  MetricUnit$inboundSchema,
  MetricUnit$outboundSchema,
} from "./metricunit.js";
import {
  TimeseriesInterval,
  TimeseriesInterval$inboundSchema,
  TimeseriesInterval$outboundSchema,
} from "./timeseriesinterval.js";

export type Values = number | number;

export type Accumulation = {
  bucketLength: TimeseriesInterval;
  /**
   * Timeseries name.
   */
  name: string;
  unit: MetricUnit;
  /**
   * Timeseries values.
   *
   * @remarks
   * Each element is a tuple of a timestamp in Unix epoch seconds and a data point.
   * The data point represents the accumulated value for a bucket of time starting at the provided timestamp, lasting for the duration of the `bucket_length` parameter.
   */
  values: Array<Array<number | number>>;
};

/** @internal */
export const Values$inboundSchema: z.ZodType<Values, z.ZodTypeDef, unknown> = z
  .union([z.number().int(), z.number()]);

/** @internal */
export type Values$Outbound = number | number;

/** @internal */
export const Values$outboundSchema: z.ZodType<
  Values$Outbound,
  z.ZodTypeDef,
  Values
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Values$ {
  /** @deprecated use `Values$inboundSchema` instead. */
  export const inboundSchema = Values$inboundSchema;
  /** @deprecated use `Values$outboundSchema` instead. */
  export const outboundSchema = Values$outboundSchema;
  /** @deprecated use `Values$Outbound` instead. */
  export type Outbound = Values$Outbound;
}

export function valuesToJSON(values: Values): string {
  return JSON.stringify(Values$outboundSchema.parse(values));
}

export function valuesFromJSON(
  jsonString: string,
): SafeParseResult<Values, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Values$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Values' from JSON`,
  );
}

/** @internal */
export const Accumulation$inboundSchema: z.ZodType<
  Accumulation,
  z.ZodTypeDef,
  unknown
> = z.object({
  bucket_length: TimeseriesInterval$inboundSchema,
  name: z.string(),
  unit: MetricUnit$inboundSchema,
  values: z.array(z.array(z.union([z.number().int(), z.number()]))),
}).transform((v) => {
  return remap$(v, {
    "bucket_length": "bucketLength",
  });
});

/** @internal */
export type Accumulation$Outbound = {
  bucket_length: string;
  name: string;
  unit: string;
  values: Array<Array<number | number>>;
};

/** @internal */
export const Accumulation$outboundSchema: z.ZodType<
  Accumulation$Outbound,
  z.ZodTypeDef,
  Accumulation
> = z.object({
  bucketLength: TimeseriesInterval$outboundSchema,
  name: z.string(),
  unit: MetricUnit$outboundSchema,
  values: z.array(z.array(z.union([z.number().int(), z.number()]))),
}).transform((v) => {
  return remap$(v, {
    bucketLength: "bucket_length",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Accumulation$ {
  /** @deprecated use `Accumulation$inboundSchema` instead. */
  export const inboundSchema = Accumulation$inboundSchema;
  /** @deprecated use `Accumulation$outboundSchema` instead. */
  export const outboundSchema = Accumulation$outboundSchema;
  /** @deprecated use `Accumulation$Outbound` instead. */
  export type Outbound = Accumulation$Outbound;
}

export function accumulationToJSON(accumulation: Accumulation): string {
  return JSON.stringify(Accumulation$outboundSchema.parse(accumulation));
}

export function accumulationFromJSON(
  jsonString: string,
): SafeParseResult<Accumulation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Accumulation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Accumulation' from JSON`,
  );
}
