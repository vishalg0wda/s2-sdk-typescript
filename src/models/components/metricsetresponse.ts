/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Metric,
  Metric$inboundSchema,
  Metric$Outbound,
  Metric$outboundSchema,
} from "./metric.js";

export type MetricSetResponse = {
  /**
   * Metrics comprising the set.
   */
  values: Array<Metric>;
};

/** @internal */
export const MetricSetResponse$inboundSchema: z.ZodType<
  MetricSetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.array(Metric$inboundSchema),
});

/** @internal */
export type MetricSetResponse$Outbound = {
  values: Array<Metric$Outbound>;
};

/** @internal */
export const MetricSetResponse$outboundSchema: z.ZodType<
  MetricSetResponse$Outbound,
  z.ZodTypeDef,
  MetricSetResponse
> = z.object({
  values: z.array(Metric$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricSetResponse$ {
  /** @deprecated use `MetricSetResponse$inboundSchema` instead. */
  export const inboundSchema = MetricSetResponse$inboundSchema;
  /** @deprecated use `MetricSetResponse$outboundSchema` instead. */
  export const outboundSchema = MetricSetResponse$outboundSchema;
  /** @deprecated use `MetricSetResponse$Outbound` instead. */
  export type Outbound = MetricSetResponse$Outbound;
}

export function metricSetResponseToJSON(
  metricSetResponse: MetricSetResponse,
): string {
  return JSON.stringify(
    MetricSetResponse$outboundSchema.parse(metricSetResponse),
  );
}

export function metricSetResponseFromJSON(
  jsonString: string,
): SafeParseResult<MetricSetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricSetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricSetResponse' from JSON`,
  );
}
