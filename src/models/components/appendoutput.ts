/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Output from append response.
 */
export type AppendOutput = {
  /**
   * Sequence number of last record appended + 1.
   *
   * @remarks
   * `end_seq_num - start_seq_num` will be the number of records in the batch.
   */
  endSeqNum: number;
  /**
   * Sequence number of last durable record on the stream + 1.
   *
   * @remarks
   * This can be greater than `end_seq_num` in case of concurrent appends.
   */
  nextSeqNum: number;
  /**
   * Sequence number of first record appended.
   */
  startSeqNum: number;
};

/** @internal */
export const AppendOutput$inboundSchema: z.ZodType<
  AppendOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  end_seq_num: z.number().int(),
  next_seq_num: z.number().int(),
  start_seq_num: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "end_seq_num": "endSeqNum",
    "next_seq_num": "nextSeqNum",
    "start_seq_num": "startSeqNum",
  });
});

/** @internal */
export type AppendOutput$Outbound = {
  end_seq_num: number;
  next_seq_num: number;
  start_seq_num: number;
};

/** @internal */
export const AppendOutput$outboundSchema: z.ZodType<
  AppendOutput$Outbound,
  z.ZodTypeDef,
  AppendOutput
> = z.object({
  endSeqNum: z.number().int(),
  nextSeqNum: z.number().int(),
  startSeqNum: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    endSeqNum: "end_seq_num",
    nextSeqNum: "next_seq_num",
    startSeqNum: "start_seq_num",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppendOutput$ {
  /** @deprecated use `AppendOutput$inboundSchema` instead. */
  export const inboundSchema = AppendOutput$inboundSchema;
  /** @deprecated use `AppendOutput$outboundSchema` instead. */
  export const outboundSchema = AppendOutput$outboundSchema;
  /** @deprecated use `AppendOutput$Outbound` instead. */
  export type Outbound = AppendOutput$Outbound;
}

export function appendOutputToJSON(appendOutput: AppendOutput): string {
  return JSON.stringify(AppendOutput$outboundSchema.parse(appendOutput));
}

export function appendOutputFromJSON(
  jsonString: string,
): SafeParseResult<AppendOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppendOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppendOutput' from JSON`,
  );
}
