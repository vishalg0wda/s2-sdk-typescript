/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Accumulation,
  Accumulation$inboundSchema,
  Accumulation$Outbound,
  Accumulation$outboundSchema,
} from "./accumulation.js";
import {
  Gauge,
  Gauge$inboundSchema,
  Gauge$Outbound,
  Gauge$outboundSchema,
} from "./gauge.js";
import {
  Label,
  Label$inboundSchema,
  Label$Outbound,
  Label$outboundSchema,
} from "./label.js";
import {
  Scalar,
  Scalar$inboundSchema,
  Scalar$Outbound,
  Scalar$outboundSchema,
} from "./scalar.js";

/**
 * A set of string labels.
 */
export type Four = {
  label: Label;
};

/**
 * A named series of (timestamp, value) points each representing an instantaneous value.
 */
export type Three = {
  gauge: Gauge;
};

/**
 * A named series of (timestamp, value) points representing an accumulation over a specified
 *
 * @remarks
 * bucket.
 */
export type Two = {
  accumulation: Accumulation;
};

/**
 * A single named value.
 */
export type Metric1 = {
  scalar: Scalar;
};

export type Metric = Metric1 | Two | Three | Four;

/** @internal */
export const Four$inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown> = z
  .object({
    label: Label$inboundSchema,
  });

/** @internal */
export type Four$Outbound = {
  label: Label$Outbound;
};

/** @internal */
export const Four$outboundSchema: z.ZodType<Four$Outbound, z.ZodTypeDef, Four> =
  z.object({
    label: Label$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Four$ {
  /** @deprecated use `Four$inboundSchema` instead. */
  export const inboundSchema = Four$inboundSchema;
  /** @deprecated use `Four$outboundSchema` instead. */
  export const outboundSchema = Four$outboundSchema;
  /** @deprecated use `Four$Outbound` instead. */
  export type Outbound = Four$Outbound;
}

export function fourToJSON(four: Four): string {
  return JSON.stringify(Four$outboundSchema.parse(four));
}

export function fourFromJSON(
  jsonString: string,
): SafeParseResult<Four, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Four$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Four' from JSON`,
  );
}

/** @internal */
export const Three$inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown> = z
  .object({
    gauge: Gauge$inboundSchema,
  });

/** @internal */
export type Three$Outbound = {
  gauge: Gauge$Outbound;
};

/** @internal */
export const Three$outboundSchema: z.ZodType<
  Three$Outbound,
  z.ZodTypeDef,
  Three
> = z.object({
  gauge: Gauge$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Three$ {
  /** @deprecated use `Three$inboundSchema` instead. */
  export const inboundSchema = Three$inboundSchema;
  /** @deprecated use `Three$outboundSchema` instead. */
  export const outboundSchema = Three$outboundSchema;
  /** @deprecated use `Three$Outbound` instead. */
  export type Outbound = Three$Outbound;
}

export function threeToJSON(three: Three): string {
  return JSON.stringify(Three$outboundSchema.parse(three));
}

export function threeFromJSON(
  jsonString: string,
): SafeParseResult<Three, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Three$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Three' from JSON`,
  );
}

/** @internal */
export const Two$inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z
  .object({
    accumulation: Accumulation$inboundSchema,
  });

/** @internal */
export type Two$Outbound = {
  accumulation: Accumulation$Outbound;
};

/** @internal */
export const Two$outboundSchema: z.ZodType<Two$Outbound, z.ZodTypeDef, Two> = z
  .object({
    accumulation: Accumulation$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
  /** @deprecated use `Two$inboundSchema` instead. */
  export const inboundSchema = Two$inboundSchema;
  /** @deprecated use `Two$outboundSchema` instead. */
  export const outboundSchema = Two$outboundSchema;
  /** @deprecated use `Two$Outbound` instead. */
  export type Outbound = Two$Outbound;
}

export function twoToJSON(two: Two): string {
  return JSON.stringify(Two$outboundSchema.parse(two));
}

export function twoFromJSON(
  jsonString: string,
): SafeParseResult<Two, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Two$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Two' from JSON`,
  );
}

/** @internal */
export const Metric1$inboundSchema: z.ZodType<Metric1, z.ZodTypeDef, unknown> =
  z.object({
    scalar: Scalar$inboundSchema,
  });

/** @internal */
export type Metric1$Outbound = {
  scalar: Scalar$Outbound;
};

/** @internal */
export const Metric1$outboundSchema: z.ZodType<
  Metric1$Outbound,
  z.ZodTypeDef,
  Metric1
> = z.object({
  scalar: Scalar$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metric1$ {
  /** @deprecated use `Metric1$inboundSchema` instead. */
  export const inboundSchema = Metric1$inboundSchema;
  /** @deprecated use `Metric1$outboundSchema` instead. */
  export const outboundSchema = Metric1$outboundSchema;
  /** @deprecated use `Metric1$Outbound` instead. */
  export type Outbound = Metric1$Outbound;
}

export function metric1ToJSON(metric1: Metric1): string {
  return JSON.stringify(Metric1$outboundSchema.parse(metric1));
}

export function metric1FromJSON(
  jsonString: string,
): SafeParseResult<Metric1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metric1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metric1' from JSON`,
  );
}

/** @internal */
export const Metric$inboundSchema: z.ZodType<Metric, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => Metric1$inboundSchema),
    z.lazy(() => Two$inboundSchema),
    z.lazy(() => Three$inboundSchema),
    z.lazy(() => Four$inboundSchema),
  ]);

/** @internal */
export type Metric$Outbound =
  | Metric1$Outbound
  | Two$Outbound
  | Three$Outbound
  | Four$Outbound;

/** @internal */
export const Metric$outboundSchema: z.ZodType<
  Metric$Outbound,
  z.ZodTypeDef,
  Metric
> = z.union([
  z.lazy(() => Metric1$outboundSchema),
  z.lazy(() => Two$outboundSchema),
  z.lazy(() => Three$outboundSchema),
  z.lazy(() => Four$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metric$ {
  /** @deprecated use `Metric$inboundSchema` instead. */
  export const inboundSchema = Metric$inboundSchema;
  /** @deprecated use `Metric$outboundSchema` instead. */
  export const outboundSchema = Metric$outboundSchema;
  /** @deprecated use `Metric$Outbound` instead. */
  export type Outbound = Metric$Outbound;
}

export function metricToJSON(metric: Metric): string {
  return JSON.stringify(Metric$outboundSchema.parse(metric));
}

export function metricFromJSON(
  jsonString: string,
): SafeParseResult<Metric, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metric$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metric' from JSON`,
  );
}
