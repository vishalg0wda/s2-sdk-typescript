/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StreamInfo,
  StreamInfo$inboundSchema,
  StreamInfo$Outbound,
  StreamInfo$outboundSchema,
} from "./streaminfo.js";

/**
 * List streams response.
 */
export type ListStreamsResponse = {
  /**
   * If set, indicates there are more results that can be listed with `start_after`.
   */
  hasMore: boolean;
  /**
   * Matching streams.
   */
  streams: Array<StreamInfo>;
};

/** @internal */
export const ListStreamsResponse$inboundSchema: z.ZodType<
  ListStreamsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  has_more: z.boolean(),
  streams: z.array(StreamInfo$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type ListStreamsResponse$Outbound = {
  has_more: boolean;
  streams: Array<StreamInfo$Outbound>;
};

/** @internal */
export const ListStreamsResponse$outboundSchema: z.ZodType<
  ListStreamsResponse$Outbound,
  z.ZodTypeDef,
  ListStreamsResponse
> = z.object({
  hasMore: z.boolean(),
  streams: z.array(StreamInfo$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListStreamsResponse$ {
  /** @deprecated use `ListStreamsResponse$inboundSchema` instead. */
  export const inboundSchema = ListStreamsResponse$inboundSchema;
  /** @deprecated use `ListStreamsResponse$outboundSchema` instead. */
  export const outboundSchema = ListStreamsResponse$outboundSchema;
  /** @deprecated use `ListStreamsResponse$Outbound` instead. */
  export type Outbound = ListStreamsResponse$Outbound;
}

export function listStreamsResponseToJSON(
  listStreamsResponse: ListStreamsResponse,
): string {
  return JSON.stringify(
    ListStreamsResponse$outboundSchema.parse(listStreamsResponse),
  );
}

export function listStreamsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListStreamsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListStreamsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListStreamsResponse' from JSON`,
  );
}
