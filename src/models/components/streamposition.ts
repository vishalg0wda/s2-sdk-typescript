/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Position of a record in a stream.
 */
export type StreamPosition = {
  /**
   * Sequence number assigned by the service.
   */
  seqNum: number;
  /**
   * Timestamp, which may be client-specified or assigned by the service.
   *
   * @remarks
   * If it is assigned by the service, it will represent milliseconds since Unix epoch.
   */
  timestamp: number;
};

/** @internal */
export const StreamPosition$inboundSchema: z.ZodType<
  StreamPosition,
  z.ZodTypeDef,
  unknown
> = z.object({
  seq_num: z.number().int(),
  timestamp: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "seq_num": "seqNum",
  });
});

/** @internal */
export type StreamPosition$Outbound = {
  seq_num: number;
  timestamp: number;
};

/** @internal */
export const StreamPosition$outboundSchema: z.ZodType<
  StreamPosition$Outbound,
  z.ZodTypeDef,
  StreamPosition
> = z.object({
  seqNum: z.number().int(),
  timestamp: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    seqNum: "seq_num",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamPosition$ {
  /** @deprecated use `StreamPosition$inboundSchema` instead. */
  export const inboundSchema = StreamPosition$inboundSchema;
  /** @deprecated use `StreamPosition$outboundSchema` instead. */
  export const outboundSchema = StreamPosition$outboundSchema;
  /** @deprecated use `StreamPosition$Outbound` instead. */
  export type Outbound = StreamPosition$Outbound;
}

export function streamPositionToJSON(streamPosition: StreamPosition): string {
  return JSON.stringify(StreamPosition$outboundSchema.parse(streamPosition));
}

export function streamPositionFromJSON(
  jsonString: string,
): SafeParseResult<StreamPosition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamPosition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamPosition' from JSON`,
  );
}
