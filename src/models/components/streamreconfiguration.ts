/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RetentionPolicy,
  RetentionPolicy$inboundSchema,
  RetentionPolicy$Outbound,
  RetentionPolicy$outboundSchema,
} from "./retentionpolicy.js";
import {
  StorageClass,
  StorageClass$inboundSchema,
  StorageClass$outboundSchema,
} from "./storageclass.js";
import {
  TimestampingReconfiguration,
  TimestampingReconfiguration$inboundSchema,
  TimestampingReconfiguration$Outbound,
  TimestampingReconfiguration$outboundSchema,
} from "./timestampingreconfiguration.js";

export type StreamReconfiguration = {
  retentionPolicy?: RetentionPolicy | null | undefined;
  storageClass?: StorageClass | null | undefined;
  timestamping?: TimestampingReconfiguration | null | undefined;
};

/** @internal */
export const StreamReconfiguration$inboundSchema: z.ZodType<
  StreamReconfiguration,
  z.ZodTypeDef,
  unknown
> = z.object({
  retention_policy: z.nullable(RetentionPolicy$inboundSchema).optional(),
  storage_class: z.nullable(StorageClass$inboundSchema).optional(),
  timestamping: z.nullable(TimestampingReconfiguration$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "retention_policy": "retentionPolicy",
    "storage_class": "storageClass",
  });
});

/** @internal */
export type StreamReconfiguration$Outbound = {
  retention_policy?: RetentionPolicy$Outbound | null | undefined;
  storage_class?: string | null | undefined;
  timestamping?: TimestampingReconfiguration$Outbound | null | undefined;
};

/** @internal */
export const StreamReconfiguration$outboundSchema: z.ZodType<
  StreamReconfiguration$Outbound,
  z.ZodTypeDef,
  StreamReconfiguration
> = z.object({
  retentionPolicy: z.nullable(RetentionPolicy$outboundSchema).optional(),
  storageClass: z.nullable(StorageClass$outboundSchema).optional(),
  timestamping: z.nullable(TimestampingReconfiguration$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    retentionPolicy: "retention_policy",
    storageClass: "storage_class",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamReconfiguration$ {
  /** @deprecated use `StreamReconfiguration$inboundSchema` instead. */
  export const inboundSchema = StreamReconfiguration$inboundSchema;
  /** @deprecated use `StreamReconfiguration$outboundSchema` instead. */
  export const outboundSchema = StreamReconfiguration$outboundSchema;
  /** @deprecated use `StreamReconfiguration$Outbound` instead. */
  export type Outbound = StreamReconfiguration$Outbound;
}

export function streamReconfigurationToJSON(
  streamReconfiguration: StreamReconfiguration,
): string {
  return JSON.stringify(
    StreamReconfiguration$outboundSchema.parse(streamReconfiguration),
  );
}

export function streamReconfigurationFromJSON(
  jsonString: string,
): SafeParseResult<StreamReconfiguration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamReconfiguration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamReconfiguration' from JSON`,
  );
}
