/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MetricUnit,
  MetricUnit$inboundSchema,
  MetricUnit$outboundSchema,
} from "./metricunit.js";

export type Scalar = {
  /**
   * Metric name.
   */
  name: string;
  unit: MetricUnit;
  /**
   * Metric value.
   */
  value: number;
};

/** @internal */
export const Scalar$inboundSchema: z.ZodType<Scalar, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    unit: MetricUnit$inboundSchema,
    value: z.number(),
  });

/** @internal */
export type Scalar$Outbound = {
  name: string;
  unit: string;
  value: number;
};

/** @internal */
export const Scalar$outboundSchema: z.ZodType<
  Scalar$Outbound,
  z.ZodTypeDef,
  Scalar
> = z.object({
  name: z.string(),
  unit: MetricUnit$outboundSchema,
  value: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Scalar$ {
  /** @deprecated use `Scalar$inboundSchema` instead. */
  export const inboundSchema = Scalar$inboundSchema;
  /** @deprecated use `Scalar$outboundSchema` instead. */
  export const outboundSchema = Scalar$outboundSchema;
  /** @deprecated use `Scalar$Outbound` instead. */
  export type Outbound = Scalar$Outbound;
}

export function scalarToJSON(scalar: Scalar): string {
  return JSON.stringify(Scalar$outboundSchema.parse(scalar));
}

export function scalarFromJSON(
  jsonString: string,
): SafeParseResult<Scalar, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Scalar$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Scalar' from JSON`,
  );
}
