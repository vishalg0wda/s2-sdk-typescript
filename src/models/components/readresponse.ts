/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Output,
  Output$inboundSchema,
  Output$Outbound,
  Output$outboundSchema,
} from "./output.js";

export type ErrorT = {
  data: string;
  event: string;
};

export type ReadResponseOutput = {
  /**
   * Reply which can be a batch of records, or a sequence number if the request could not be satisfied.
   */
  data: Output;
  event: string;
};

export type ReadResponse = ReadResponseOutput | ErrorT;

/** @internal */
export const ErrorT$inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown> = z
  .object({
    data: z.string(),
    event: z.string(),
  });

/** @internal */
export type ErrorT$Outbound = {
  data: string;
  event: string;
};

/** @internal */
export const ErrorT$outboundSchema: z.ZodType<
  ErrorT$Outbound,
  z.ZodTypeDef,
  ErrorT
> = z.object({
  data: z.string(),
  event: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorT$ {
  /** @deprecated use `ErrorT$inboundSchema` instead. */
  export const inboundSchema = ErrorT$inboundSchema;
  /** @deprecated use `ErrorT$outboundSchema` instead. */
  export const outboundSchema = ErrorT$outboundSchema;
  /** @deprecated use `ErrorT$Outbound` instead. */
  export type Outbound = ErrorT$Outbound;
}

export function errorToJSON(errorT: ErrorT): string {
  return JSON.stringify(ErrorT$outboundSchema.parse(errorT));
}

export function errorFromJSON(
  jsonString: string,
): SafeParseResult<ErrorT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorT' from JSON`,
  );
}

/** @internal */
export const ReadResponseOutput$inboundSchema: z.ZodType<
  ReadResponseOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(Output$inboundSchema),
  event: z.string(),
});

/** @internal */
export type ReadResponseOutput$Outbound = {
  data: Output$Outbound;
  event: string;
};

/** @internal */
export const ReadResponseOutput$outboundSchema: z.ZodType<
  ReadResponseOutput$Outbound,
  z.ZodTypeDef,
  ReadResponseOutput
> = z.object({
  data: Output$outboundSchema,
  event: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadResponseOutput$ {
  /** @deprecated use `ReadResponseOutput$inboundSchema` instead. */
  export const inboundSchema = ReadResponseOutput$inboundSchema;
  /** @deprecated use `ReadResponseOutput$outboundSchema` instead. */
  export const outboundSchema = ReadResponseOutput$outboundSchema;
  /** @deprecated use `ReadResponseOutput$Outbound` instead. */
  export type Outbound = ReadResponseOutput$Outbound;
}

export function readResponseOutputToJSON(
  readResponseOutput: ReadResponseOutput,
): string {
  return JSON.stringify(
    ReadResponseOutput$outboundSchema.parse(readResponseOutput),
  );
}

export function readResponseOutputFromJSON(
  jsonString: string,
): SafeParseResult<ReadResponseOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadResponseOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadResponseOutput' from JSON`,
  );
}

/** @internal */
export const ReadResponse$inboundSchema: z.ZodType<
  ReadResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ReadResponseOutput$inboundSchema),
  z.lazy(() => ErrorT$inboundSchema),
]);

/** @internal */
export type ReadResponse$Outbound =
  | ReadResponseOutput$Outbound
  | ErrorT$Outbound;

/** @internal */
export const ReadResponse$outboundSchema: z.ZodType<
  ReadResponse$Outbound,
  z.ZodTypeDef,
  ReadResponse
> = z.union([
  z.lazy(() => ReadResponseOutput$outboundSchema),
  z.lazy(() => ErrorT$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadResponse$ {
  /** @deprecated use `ReadResponse$inboundSchema` instead. */
  export const inboundSchema = ReadResponse$inboundSchema;
  /** @deprecated use `ReadResponse$outboundSchema` instead. */
  export const outboundSchema = ReadResponse$outboundSchema;
  /** @deprecated use `ReadResponse$Outbound` instead. */
  export type Outbound = ReadResponse$Outbound;
}

export function readResponseToJSON(readResponse: ReadResponse): string {
  return JSON.stringify(ReadResponse$outboundSchema.parse(readResponse));
}

export function readResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadResponse' from JSON`,
  );
}
