/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Output,
  Output$inboundSchema,
  Output$Outbound,
  Output$outboundSchema,
} from "./output.js";

export type ReadResponse2 = {
  data: string;
  event: string;
};

export type ReadResponse1 = {
  /**
   * Reply which can be a batch of records, or a sequence number if the request could not be satisfied.
   */
  data: Output;
  event: string;
};

export type ReadResponse = ReadResponse1 | ReadResponse2;

/** @internal */
export const ReadResponse2$inboundSchema: z.ZodType<
  ReadResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string(),
  event: z.string(),
});

/** @internal */
export type ReadResponse2$Outbound = {
  data: string;
  event: string;
};

/** @internal */
export const ReadResponse2$outboundSchema: z.ZodType<
  ReadResponse2$Outbound,
  z.ZodTypeDef,
  ReadResponse2
> = z.object({
  data: z.string(),
  event: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadResponse2$ {
  /** @deprecated use `ReadResponse2$inboundSchema` instead. */
  export const inboundSchema = ReadResponse2$inboundSchema;
  /** @deprecated use `ReadResponse2$outboundSchema` instead. */
  export const outboundSchema = ReadResponse2$outboundSchema;
  /** @deprecated use `ReadResponse2$Outbound` instead. */
  export type Outbound = ReadResponse2$Outbound;
}

export function readResponse2ToJSON(readResponse2: ReadResponse2): string {
  return JSON.stringify(ReadResponse2$outboundSchema.parse(readResponse2));
}

export function readResponse2FromJSON(
  jsonString: string,
): SafeParseResult<ReadResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadResponse2' from JSON`,
  );
}

/** @internal */
export const ReadResponse1$inboundSchema: z.ZodType<
  ReadResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(Output$inboundSchema),
  event: z.string(),
});

/** @internal */
export type ReadResponse1$Outbound = {
  data: Output$Outbound;
  event: string;
};

/** @internal */
export const ReadResponse1$outboundSchema: z.ZodType<
  ReadResponse1$Outbound,
  z.ZodTypeDef,
  ReadResponse1
> = z.object({
  data: Output$outboundSchema,
  event: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadResponse1$ {
  /** @deprecated use `ReadResponse1$inboundSchema` instead. */
  export const inboundSchema = ReadResponse1$inboundSchema;
  /** @deprecated use `ReadResponse1$outboundSchema` instead. */
  export const outboundSchema = ReadResponse1$outboundSchema;
  /** @deprecated use `ReadResponse1$Outbound` instead. */
  export type Outbound = ReadResponse1$Outbound;
}

export function readResponse1ToJSON(readResponse1: ReadResponse1): string {
  return JSON.stringify(ReadResponse1$outboundSchema.parse(readResponse1));
}

export function readResponse1FromJSON(
  jsonString: string,
): SafeParseResult<ReadResponse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadResponse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadResponse1' from JSON`,
  );
}

/** @internal */
export const ReadResponse$inboundSchema: z.ZodType<
  ReadResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ReadResponse1$inboundSchema),
  z.lazy(() => ReadResponse2$inboundSchema),
]);

/** @internal */
export type ReadResponse$Outbound =
  | ReadResponse1$Outbound
  | ReadResponse2$Outbound;

/** @internal */
export const ReadResponse$outboundSchema: z.ZodType<
  ReadResponse$Outbound,
  z.ZodTypeDef,
  ReadResponse
> = z.union([
  z.lazy(() => ReadResponse1$outboundSchema),
  z.lazy(() => ReadResponse2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadResponse$ {
  /** @deprecated use `ReadResponse$inboundSchema` instead. */
  export const inboundSchema = ReadResponse$inboundSchema;
  /** @deprecated use `ReadResponse$outboundSchema` instead. */
  export const outboundSchema = ReadResponse$outboundSchema;
  /** @deprecated use `ReadResponse$Outbound` instead. */
  export type Outbound = ReadResponse$Outbound;
}

export function readResponseToJSON(readResponse: ReadResponse): string {
  return JSON.stringify(ReadResponse$outboundSchema.parse(readResponse));
}

export function readResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadResponse' from JSON`,
  );
}
