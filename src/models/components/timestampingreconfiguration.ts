/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TimestampingMode,
  TimestampingMode$inboundSchema,
  TimestampingMode$outboundSchema,
} from "./timestampingmode.js";

export type TimestampingReconfiguration = {
  mode?: TimestampingMode | null | undefined;
  /**
   * Allow client-specified timestamps to exceed the arrival time.
   */
  uncapped?: boolean | null | undefined;
};

/** @internal */
export const TimestampingReconfiguration$inboundSchema: z.ZodType<
  TimestampingReconfiguration,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: z.nullable(TimestampingMode$inboundSchema).optional(),
  uncapped: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type TimestampingReconfiguration$Outbound = {
  mode?: string | null | undefined;
  uncapped?: boolean | null | undefined;
};

/** @internal */
export const TimestampingReconfiguration$outboundSchema: z.ZodType<
  TimestampingReconfiguration$Outbound,
  z.ZodTypeDef,
  TimestampingReconfiguration
> = z.object({
  mode: z.nullable(TimestampingMode$outboundSchema).optional(),
  uncapped: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimestampingReconfiguration$ {
  /** @deprecated use `TimestampingReconfiguration$inboundSchema` instead. */
  export const inboundSchema = TimestampingReconfiguration$inboundSchema;
  /** @deprecated use `TimestampingReconfiguration$outboundSchema` instead. */
  export const outboundSchema = TimestampingReconfiguration$outboundSchema;
  /** @deprecated use `TimestampingReconfiguration$Outbound` instead. */
  export type Outbound = TimestampingReconfiguration$Outbound;
}

export function timestampingReconfigurationToJSON(
  timestampingReconfiguration: TimestampingReconfiguration,
): string {
  return JSON.stringify(
    TimestampingReconfiguration$outboundSchema.parse(
      timestampingReconfiguration,
    ),
  );
}

export function timestampingReconfigurationFromJSON(
  jsonString: string,
): SafeParseResult<TimestampingReconfiguration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimestampingReconfiguration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimestampingReconfiguration' from JSON`,
  );
}
