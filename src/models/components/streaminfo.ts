/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StreamInfo = {
  /**
   * Creation time in ISO 8601 format.
   */
  createdAt: string;
  /**
   * Deletion time in ISO 8601 format, if the stream is being deleted.
   */
  deletedAt?: string | null | undefined;
  /**
   * Stream name.
   */
  name: string;
};

/** @internal */
export const StreamInfo$inboundSchema: z.ZodType<
  StreamInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string(),
  deleted_at: z.nullable(z.string()).optional(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "deleted_at": "deletedAt",
  });
});

/** @internal */
export type StreamInfo$Outbound = {
  created_at: string;
  deleted_at?: string | null | undefined;
  name: string;
};

/** @internal */
export const StreamInfo$outboundSchema: z.ZodType<
  StreamInfo$Outbound,
  z.ZodTypeDef,
  StreamInfo
> = z.object({
  createdAt: z.string(),
  deletedAt: z.nullable(z.string()).optional(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    deletedAt: "deleted_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamInfo$ {
  /** @deprecated use `StreamInfo$inboundSchema` instead. */
  export const inboundSchema = StreamInfo$inboundSchema;
  /** @deprecated use `StreamInfo$outboundSchema` instead. */
  export const outboundSchema = StreamInfo$outboundSchema;
  /** @deprecated use `StreamInfo$Outbound` instead. */
  export type Outbound = StreamInfo$Outbound;
}

export function streamInfoToJSON(streamInfo: StreamInfo): string {
  return JSON.stringify(StreamInfo$outboundSchema.parse(streamInfo));
}

export function streamInfoFromJSON(
  jsonString: string,
): SafeParseResult<StreamInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamInfo' from JSON`,
  );
}
