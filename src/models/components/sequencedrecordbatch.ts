/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SequencedRecord,
  SequencedRecord$inboundSchema,
  SequencedRecord$Outbound,
  SequencedRecord$outboundSchema,
} from "./sequencedrecord.js";

/**
 * A batch of sequenced records.
 */
export type SequencedRecordBatch = {
  /**
   * Batch of sequenced records.
   */
  records: Array<SequencedRecord>;
};

/** @internal */
export const SequencedRecordBatch$inboundSchema: z.ZodType<
  SequencedRecordBatch,
  z.ZodTypeDef,
  unknown
> = z.object({
  records: z.array(SequencedRecord$inboundSchema),
});

/** @internal */
export type SequencedRecordBatch$Outbound = {
  records: Array<SequencedRecord$Outbound>;
};

/** @internal */
export const SequencedRecordBatch$outboundSchema: z.ZodType<
  SequencedRecordBatch$Outbound,
  z.ZodTypeDef,
  SequencedRecordBatch
> = z.object({
  records: z.array(SequencedRecord$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SequencedRecordBatch$ {
  /** @deprecated use `SequencedRecordBatch$inboundSchema` instead. */
  export const inboundSchema = SequencedRecordBatch$inboundSchema;
  /** @deprecated use `SequencedRecordBatch$outboundSchema` instead. */
  export const outboundSchema = SequencedRecordBatch$outboundSchema;
  /** @deprecated use `SequencedRecordBatch$Outbound` instead. */
  export type Outbound = SequencedRecordBatch$Outbound;
}

export function sequencedRecordBatchToJSON(
  sequencedRecordBatch: SequencedRecordBatch,
): string {
  return JSON.stringify(
    SequencedRecordBatch$outboundSchema.parse(sequencedRecordBatch),
  );
}

export function sequencedRecordBatchFromJSON(
  jsonString: string,
): SafeParseResult<SequencedRecordBatch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SequencedRecordBatch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SequencedRecordBatch' from JSON`,
  );
}
