/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Basin information.
 */
export type BasinInfo = {
  /**
   * Cell assignment.
   */
  cell: string;
  /**
   * Basin name.
   */
  name: string;
  /**
   * Basin scope.
   */
  scope: string;
  /**
   * Basin state.
   */
  state: number;
};

/** @internal */
export const BasinInfo$inboundSchema: z.ZodType<
  BasinInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  cell: z.string(),
  name: z.string(),
  scope: z.string(),
  state: z.number().int(),
});

/** @internal */
export type BasinInfo$Outbound = {
  cell: string;
  name: string;
  scope: string;
  state: number;
};

/** @internal */
export const BasinInfo$outboundSchema: z.ZodType<
  BasinInfo$Outbound,
  z.ZodTypeDef,
  BasinInfo
> = z.object({
  cell: z.string(),
  name: z.string(),
  scope: z.string(),
  state: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BasinInfo$ {
  /** @deprecated use `BasinInfo$inboundSchema` instead. */
  export const inboundSchema = BasinInfo$inboundSchema;
  /** @deprecated use `BasinInfo$outboundSchema` instead. */
  export const outboundSchema = BasinInfo$outboundSchema;
  /** @deprecated use `BasinInfo$Outbound` instead. */
  export type Outbound = BasinInfo$Outbound;
}

export function basinInfoToJSON(basinInfo: BasinInfo): string {
  return JSON.stringify(BasinInfo$outboundSchema.parse(basinInfo));
}

export function basinInfoFromJSON(
  jsonString: string,
): SafeParseResult<BasinInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BasinInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BasinInfo' from JSON`,
  );
}
