/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BasinConfig,
  BasinConfig$inboundSchema,
  BasinConfig$Outbound,
  BasinConfig$outboundSchema,
} from "./basinconfig.js";
import {
  BasinScope,
  BasinScope$inboundSchema,
  BasinScope$outboundSchema,
} from "./basinscope.js";

export type CreateOrReconfigureBasinRequestScope = BasinScope;

export type CreateOrReconfigureBasinRequest = {
  config?: BasinConfig | null | undefined;
  scope?: BasinScope | undefined;
};

/** @internal */
export const CreateOrReconfigureBasinRequestScope$inboundSchema: z.ZodType<
  CreateOrReconfigureBasinRequestScope,
  z.ZodTypeDef,
  unknown
> = BasinScope$inboundSchema;

/** @internal */
export type CreateOrReconfigureBasinRequestScope$Outbound = string;

/** @internal */
export const CreateOrReconfigureBasinRequestScope$outboundSchema: z.ZodType<
  CreateOrReconfigureBasinRequestScope$Outbound,
  z.ZodTypeDef,
  CreateOrReconfigureBasinRequestScope
> = BasinScope$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrReconfigureBasinRequestScope$ {
  /** @deprecated use `CreateOrReconfigureBasinRequestScope$inboundSchema` instead. */
  export const inboundSchema =
    CreateOrReconfigureBasinRequestScope$inboundSchema;
  /** @deprecated use `CreateOrReconfigureBasinRequestScope$outboundSchema` instead. */
  export const outboundSchema =
    CreateOrReconfigureBasinRequestScope$outboundSchema;
  /** @deprecated use `CreateOrReconfigureBasinRequestScope$Outbound` instead. */
  export type Outbound = CreateOrReconfigureBasinRequestScope$Outbound;
}

export function createOrReconfigureBasinRequestScopeToJSON(
  createOrReconfigureBasinRequestScope: CreateOrReconfigureBasinRequestScope,
): string {
  return JSON.stringify(
    CreateOrReconfigureBasinRequestScope$outboundSchema.parse(
      createOrReconfigureBasinRequestScope,
    ),
  );
}

export function createOrReconfigureBasinRequestScopeFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrReconfigureBasinRequestScope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOrReconfigureBasinRequestScope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrReconfigureBasinRequestScope' from JSON`,
  );
}

/** @internal */
export const CreateOrReconfigureBasinRequest$inboundSchema: z.ZodType<
  CreateOrReconfigureBasinRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  config: z.nullable(BasinConfig$inboundSchema).optional(),
  scope: BasinScope$inboundSchema.optional(),
});

/** @internal */
export type CreateOrReconfigureBasinRequest$Outbound = {
  config?: BasinConfig$Outbound | null | undefined;
  scope?: string | undefined;
};

/** @internal */
export const CreateOrReconfigureBasinRequest$outboundSchema: z.ZodType<
  CreateOrReconfigureBasinRequest$Outbound,
  z.ZodTypeDef,
  CreateOrReconfigureBasinRequest
> = z.object({
  config: z.nullable(BasinConfig$outboundSchema).optional(),
  scope: BasinScope$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrReconfigureBasinRequest$ {
  /** @deprecated use `CreateOrReconfigureBasinRequest$inboundSchema` instead. */
  export const inboundSchema = CreateOrReconfigureBasinRequest$inboundSchema;
  /** @deprecated use `CreateOrReconfigureBasinRequest$outboundSchema` instead. */
  export const outboundSchema = CreateOrReconfigureBasinRequest$outboundSchema;
  /** @deprecated use `CreateOrReconfigureBasinRequest$Outbound` instead. */
  export type Outbound = CreateOrReconfigureBasinRequest$Outbound;
}

export function createOrReconfigureBasinRequestToJSON(
  createOrReconfigureBasinRequest: CreateOrReconfigureBasinRequest,
): string {
  return JSON.stringify(
    CreateOrReconfigureBasinRequest$outboundSchema.parse(
      createOrReconfigureBasinRequest,
    ),
  );
}

export function createOrReconfigureBasinRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrReconfigureBasinRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrReconfigureBasinRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrReconfigureBasinRequest' from JSON`,
  );
}
