/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ReadWritePermissions,
  ReadWritePermissions$inboundSchema,
  ReadWritePermissions$Outbound,
  ReadWritePermissions$outboundSchema,
} from "./readwritepermissions.js";

export type PermittedOperationGroups = {
  account?: ReadWritePermissions | null | undefined;
  basin?: ReadWritePermissions | null | undefined;
  stream?: ReadWritePermissions | null | undefined;
};

/** @internal */
export const PermittedOperationGroups$inboundSchema: z.ZodType<
  PermittedOperationGroups,
  z.ZodTypeDef,
  unknown
> = z.object({
  account: z.nullable(ReadWritePermissions$inboundSchema).optional(),
  basin: z.nullable(ReadWritePermissions$inboundSchema).optional(),
  stream: z.nullable(ReadWritePermissions$inboundSchema).optional(),
});

/** @internal */
export type PermittedOperationGroups$Outbound = {
  account?: ReadWritePermissions$Outbound | null | undefined;
  basin?: ReadWritePermissions$Outbound | null | undefined;
  stream?: ReadWritePermissions$Outbound | null | undefined;
};

/** @internal */
export const PermittedOperationGroups$outboundSchema: z.ZodType<
  PermittedOperationGroups$Outbound,
  z.ZodTypeDef,
  PermittedOperationGroups
> = z.object({
  account: z.nullable(ReadWritePermissions$outboundSchema).optional(),
  basin: z.nullable(ReadWritePermissions$outboundSchema).optional(),
  stream: z.nullable(ReadWritePermissions$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PermittedOperationGroups$ {
  /** @deprecated use `PermittedOperationGroups$inboundSchema` instead. */
  export const inboundSchema = PermittedOperationGroups$inboundSchema;
  /** @deprecated use `PermittedOperationGroups$outboundSchema` instead. */
  export const outboundSchema = PermittedOperationGroups$outboundSchema;
  /** @deprecated use `PermittedOperationGroups$Outbound` instead. */
  export type Outbound = PermittedOperationGroups$Outbound;
}

export function permittedOperationGroupsToJSON(
  permittedOperationGroups: PermittedOperationGroups,
): string {
  return JSON.stringify(
    PermittedOperationGroups$outboundSchema.parse(permittedOperationGroups),
  );
}

export function permittedOperationGroupsFromJSON(
  jsonString: string,
): SafeParseResult<PermittedOperationGroups, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PermittedOperationGroups$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PermittedOperationGroups' from JSON`,
  );
}
