/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Match all resources that start with this prefix.
 *
 * @remarks
 * Use an empty string to match all resource.
 */
export type Prefix = {
  /**
   * Match all resources that start with this prefix.
   *
   * @remarks
   * Use an empty string to match all resource.
   */
  prefix: string;
};

/**
 * Match only the resource with this exact name.
 *
 * @remarks
 * Use an empty string to match no resources.
 */
export type Exact = {
  /**
   * Match only the resource with this exact name.
   *
   * @remarks
   * Use an empty string to match no resources.
   */
  exact: string;
};

export type ResourceSet = Exact | Prefix;

/** @internal */
export const Prefix$inboundSchema: z.ZodType<Prefix, z.ZodTypeDef, unknown> = z
  .object({
    prefix: z.string(),
  });

/** @internal */
export type Prefix$Outbound = {
  prefix: string;
};

/** @internal */
export const Prefix$outboundSchema: z.ZodType<
  Prefix$Outbound,
  z.ZodTypeDef,
  Prefix
> = z.object({
  prefix: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Prefix$ {
  /** @deprecated use `Prefix$inboundSchema` instead. */
  export const inboundSchema = Prefix$inboundSchema;
  /** @deprecated use `Prefix$outboundSchema` instead. */
  export const outboundSchema = Prefix$outboundSchema;
  /** @deprecated use `Prefix$Outbound` instead. */
  export type Outbound = Prefix$Outbound;
}

export function prefixToJSON(prefix: Prefix): string {
  return JSON.stringify(Prefix$outboundSchema.parse(prefix));
}

export function prefixFromJSON(
  jsonString: string,
): SafeParseResult<Prefix, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Prefix$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Prefix' from JSON`,
  );
}

/** @internal */
export const Exact$inboundSchema: z.ZodType<Exact, z.ZodTypeDef, unknown> = z
  .object({
    exact: z.string(),
  });

/** @internal */
export type Exact$Outbound = {
  exact: string;
};

/** @internal */
export const Exact$outboundSchema: z.ZodType<
  Exact$Outbound,
  z.ZodTypeDef,
  Exact
> = z.object({
  exact: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Exact$ {
  /** @deprecated use `Exact$inboundSchema` instead. */
  export const inboundSchema = Exact$inboundSchema;
  /** @deprecated use `Exact$outboundSchema` instead. */
  export const outboundSchema = Exact$outboundSchema;
  /** @deprecated use `Exact$Outbound` instead. */
  export type Outbound = Exact$Outbound;
}

export function exactToJSON(exact: Exact): string {
  return JSON.stringify(Exact$outboundSchema.parse(exact));
}

export function exactFromJSON(
  jsonString: string,
): SafeParseResult<Exact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Exact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Exact' from JSON`,
  );
}

/** @internal */
export const ResourceSet$inboundSchema: z.ZodType<
  ResourceSet,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Exact$inboundSchema),
  z.lazy(() => Prefix$inboundSchema),
]);

/** @internal */
export type ResourceSet$Outbound = Exact$Outbound | Prefix$Outbound;

/** @internal */
export const ResourceSet$outboundSchema: z.ZodType<
  ResourceSet$Outbound,
  z.ZodTypeDef,
  ResourceSet
> = z.union([
  z.lazy(() => Exact$outboundSchema),
  z.lazy(() => Prefix$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceSet$ {
  /** @deprecated use `ResourceSet$inboundSchema` instead. */
  export const inboundSchema = ResourceSet$inboundSchema;
  /** @deprecated use `ResourceSet$outboundSchema` instead. */
  export const outboundSchema = ResourceSet$outboundSchema;
  /** @deprecated use `ResourceSet$Outbound` instead. */
  export type Outbound = ResourceSet$Outbound;
}

export function resourceSetToJSON(resourceSet: ResourceSet): string {
  return JSON.stringify(ResourceSet$outboundSchema.parse(resourceSet));
}

export function resourceSetFromJSON(
  jsonString: string,
): SafeParseResult<ResourceSet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResourceSet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResourceSet' from JSON`,
  );
}
