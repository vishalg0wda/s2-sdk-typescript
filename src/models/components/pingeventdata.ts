/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PingEventData = {
  timestamp: number;
};

/** @internal */
export const PingEventData$inboundSchema: z.ZodType<
  PingEventData,
  z.ZodTypeDef,
  unknown
> = z.object({
  timestamp: z.number().int(),
});

/** @internal */
export type PingEventData$Outbound = {
  timestamp: number;
};

/** @internal */
export const PingEventData$outboundSchema: z.ZodType<
  PingEventData$Outbound,
  z.ZodTypeDef,
  PingEventData
> = z.object({
  timestamp: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PingEventData$ {
  /** @deprecated use `PingEventData$inboundSchema` instead. */
  export const inboundSchema = PingEventData$inboundSchema;
  /** @deprecated use `PingEventData$outboundSchema` instead. */
  export const outboundSchema = PingEventData$outboundSchema;
  /** @deprecated use `PingEventData$Outbound` instead. */
  export type Outbound = PingEventData$Outbound;
}

export function pingEventDataToJSON(pingEventData: PingEventData): string {
  return JSON.stringify(PingEventData$outboundSchema.parse(pingEventData));
}

export function pingEventDataFromJSON(
  jsonString: string,
): SafeParseResult<PingEventData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PingEventData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PingEventData' from JSON`,
  );
}
