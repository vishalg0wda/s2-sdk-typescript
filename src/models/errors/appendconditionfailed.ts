/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { S2Error } from "./s2error.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Sequence number did not match the tail of the stream.
 *
 * @remarks
 * The expected next sequence number is returned.
 */
export type SeqNumData = {
  /**
   * Sequence number did not match the tail of the stream.
   *
   * @remarks
   * The expected next sequence number is returned.
   */
  seqNumMismatch: number;
};

/**
 * Sequence number did not match the tail of the stream.
 *
 * @remarks
 * The expected next sequence number is returned.
 */
export class SeqNum extends S2Error {
  /**
   * Sequence number did not match the tail of the stream.
   *
   * @remarks
   * The expected next sequence number is returned.
   */
  seqNumMismatch: number;

  /** The original data that was passed to this error instance. */
  data$: SeqNumData;

  constructor(
    err: SeqNumData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.seqNumMismatch = err.seqNumMismatch;

    this.name = "SeqNum";
  }
}

/**
 * Fencing token did not match.
 *
 * @remarks
 * The expected fencing token is returned.
 */
export type FencingTokenData = {
  /**
   * Fencing token did not match.
   *
   * @remarks
   * The expected fencing token is returned.
   */
  fencingTokenMismatch: string;
};

/**
 * Fencing token did not match.
 *
 * @remarks
 * The expected fencing token is returned.
 */
export class FencingToken extends S2Error {
  /**
   * Fencing token did not match.
   *
   * @remarks
   * The expected fencing token is returned.
   */
  fencingTokenMismatch: string;

  /** The original data that was passed to this error instance. */
  data$: FencingTokenData;

  constructor(
    err: FencingTokenData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.fencingTokenMismatch = err.fencingTokenMismatch;

    this.name = "FencingToken";
  }
}

/**
 * Aborted due to a failed condition.
 */
export type AppendConditionFailed = FencingToken | SeqNum;

/** @internal */
export const SeqNum$inboundSchema: z.ZodType<SeqNum, z.ZodTypeDef, unknown> = z
  .object({
    seq_num_mismatch: z.number().int(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
  .transform((v) => {
    const remapped = remap$(v, {
      "seq_num_mismatch": "seqNumMismatch",
    });

    return new SeqNum(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type SeqNum$Outbound = {
  seq_num_mismatch: number;
};

/** @internal */
export const SeqNum$outboundSchema: z.ZodType<
  SeqNum$Outbound,
  z.ZodTypeDef,
  SeqNum
> = z.instanceof(SeqNum)
  .transform(v => v.data$)
  .pipe(
    z.object({
      seqNumMismatch: z.number().int(),
    }).transform((v) => {
      return remap$(v, {
        seqNumMismatch: "seq_num_mismatch",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SeqNum$ {
  /** @deprecated use `SeqNum$inboundSchema` instead. */
  export const inboundSchema = SeqNum$inboundSchema;
  /** @deprecated use `SeqNum$outboundSchema` instead. */
  export const outboundSchema = SeqNum$outboundSchema;
  /** @deprecated use `SeqNum$Outbound` instead. */
  export type Outbound = SeqNum$Outbound;
}

/** @internal */
export const FencingToken$inboundSchema: z.ZodType<
  FencingToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  fencing_token_mismatch: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "fencing_token_mismatch": "fencingTokenMismatch",
    });

    return new FencingToken(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FencingToken$Outbound = {
  fencing_token_mismatch: string;
};

/** @internal */
export const FencingToken$outboundSchema: z.ZodType<
  FencingToken$Outbound,
  z.ZodTypeDef,
  FencingToken
> = z.instanceof(FencingToken)
  .transform(v => v.data$)
  .pipe(
    z.object({
      fencingTokenMismatch: z.string(),
    }).transform((v) => {
      return remap$(v, {
        fencingTokenMismatch: "fencing_token_mismatch",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FencingToken$ {
  /** @deprecated use `FencingToken$inboundSchema` instead. */
  export const inboundSchema = FencingToken$inboundSchema;
  /** @deprecated use `FencingToken$outboundSchema` instead. */
  export const outboundSchema = FencingToken$outboundSchema;
  /** @deprecated use `FencingToken$Outbound` instead. */
  export type Outbound = FencingToken$Outbound;
}

/** @internal */
export const AppendConditionFailed$inboundSchema: z.ZodType<
  AppendConditionFailed,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FencingToken$inboundSchema),
  z.lazy(() => SeqNum$inboundSchema),
]);

/** @internal */
export type AppendConditionFailed$Outbound =
  | FencingToken$Outbound
  | SeqNum$Outbound;

/** @internal */
export const AppendConditionFailed$outboundSchema: z.ZodType<
  AppendConditionFailed$Outbound,
  z.ZodTypeDef,
  AppendConditionFailed
> = z.union([
  z.lazy(() => FencingToken$outboundSchema),
  z.lazy(() => SeqNum$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppendConditionFailed$ {
  /** @deprecated use `AppendConditionFailed$inboundSchema` instead. */
  export const inboundSchema = AppendConditionFailed$inboundSchema;
  /** @deprecated use `AppendConditionFailed$outboundSchema` instead. */
  export const outboundSchema = AppendConditionFailed$outboundSchema;
  /** @deprecated use `AppendConditionFailed$Outbound` instead. */
  export type Outbound = AppendConditionFailed$Outbound;
}

export function appendConditionFailedToJSON(
  appendConditionFailed: AppendConditionFailed,
): string {
  return JSON.stringify(
    AppendConditionFailed$outboundSchema.parse(appendConditionFailed),
  );
}

export function appendConditionFailedFromJSON(
  jsonString: string,
): SafeParseResult<AppendConditionFailed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppendConditionFailed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppendConditionFailed' from JSON`,
  );
}
