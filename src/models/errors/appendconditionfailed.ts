/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Sequence number did not match the tail of the stream.
 *
 * @remarks
 * The expected next sequence number is returned.
 */
export type TwoData = {
  /**
   * Sequence number did not match the tail of the stream.
   *
   * @remarks
   * The expected next sequence number is returned.
   */
  seqNumMismatch: number;
};

/**
 * Sequence number did not match the tail of the stream.
 *
 * @remarks
 * The expected next sequence number is returned.
 */
export class Two extends Error {
  /**
   * Sequence number did not match the tail of the stream.
   *
   * @remarks
   * The expected next sequence number is returned.
   */
  seqNumMismatch: number;

  /** The original data that was passed to this error instance. */
  data$: TwoData;

  constructor(err: TwoData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.seqNumMismatch = err.seqNumMismatch;

    this.name = "Two";
  }
}

/**
 * Fencing token did not match.
 *
 * @remarks
 * The expected fencing token is returned.
 */
export type OneData = {
  /**
   * Fencing token did not match.
   *
   * @remarks
   * The expected fencing token is returned.
   */
  fencingTokenMismatch: string;
};

/**
 * Fencing token did not match.
 *
 * @remarks
 * The expected fencing token is returned.
 */
export class One extends Error {
  /**
   * Fencing token did not match.
   *
   * @remarks
   * The expected fencing token is returned.
   */
  fencingTokenMismatch: string;

  /** The original data that was passed to this error instance. */
  data$: OneData;

  constructor(err: OneData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.fencingTokenMismatch = err.fencingTokenMismatch;

    this.name = "One";
  }
}

/**
 * Failure response message when an Append is aborted due to a failed condition.
 */
export type AppendConditionFailed = One | Two;

/** @internal */
export const Two$inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z
  .object({
    SeqNumMismatch: z.number().int(),
  })
  .transform((v) => {
    const remapped = remap$(v, {
      "SeqNumMismatch": "seqNumMismatch",
    });

    return new Two(remapped);
  });

/** @internal */
export type Two$Outbound = {
  SeqNumMismatch: number;
};

/** @internal */
export const Two$outboundSchema: z.ZodType<Two$Outbound, z.ZodTypeDef, Two> = z
  .instanceof(Two)
  .transform(v => v.data$)
  .pipe(
    z.object({
      seqNumMismatch: z.number().int(),
    }).transform((v) => {
      return remap$(v, {
        seqNumMismatch: "SeqNumMismatch",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
  /** @deprecated use `Two$inboundSchema` instead. */
  export const inboundSchema = Two$inboundSchema;
  /** @deprecated use `Two$outboundSchema` instead. */
  export const outboundSchema = Two$outboundSchema;
  /** @deprecated use `Two$Outbound` instead. */
  export type Outbound = Two$Outbound;
}

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z
  .object({
    FencingTokenMismatch: z.string(),
  })
  .transform((v) => {
    const remapped = remap$(v, {
      "FencingTokenMismatch": "fencingTokenMismatch",
    });

    return new One(remapped);
  });

/** @internal */
export type One$Outbound = {
  FencingTokenMismatch: string;
};

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z
  .instanceof(One)
  .transform(v => v.data$)
  .pipe(
    z.object({
      fencingTokenMismatch: z.string(),
    }).transform((v) => {
      return remap$(v, {
        fencingTokenMismatch: "FencingTokenMismatch",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
  /** @deprecated use `One$Outbound` instead. */
  export type Outbound = One$Outbound;
}

/** @internal */
export const AppendConditionFailed$inboundSchema: z.ZodType<
  AppendConditionFailed,
  z.ZodTypeDef,
  unknown
> = z.union([z.lazy(() => One$inboundSchema), z.lazy(() => Two$inboundSchema)]);

/** @internal */
export type AppendConditionFailed$Outbound = One$Outbound | Two$Outbound;

/** @internal */
export const AppendConditionFailed$outboundSchema: z.ZodType<
  AppendConditionFailed$Outbound,
  z.ZodTypeDef,
  AppendConditionFailed
> = z.union([
  z.lazy(() => One$outboundSchema),
  z.lazy(() => Two$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppendConditionFailed$ {
  /** @deprecated use `AppendConditionFailed$inboundSchema` instead. */
  export const inboundSchema = AppendConditionFailed$inboundSchema;
  /** @deprecated use `AppendConditionFailed$outboundSchema` instead. */
  export const outboundSchema = AppendConditionFailed$outboundSchema;
  /** @deprecated use `AppendConditionFailed$Outbound` instead. */
  export type Outbound = AppendConditionFailed$Outbound;
}

export function appendConditionFailedToJSON(
  appendConditionFailed: AppendConditionFailed,
): string {
  return JSON.stringify(
    AppendConditionFailed$outboundSchema.parse(appendConditionFailed),
  );
}

export function appendConditionFailedFromJSON(
  jsonString: string,
): SafeParseResult<AppendConditionFailed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppendConditionFailed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppendConditionFailed' from JSON`,
  );
}
