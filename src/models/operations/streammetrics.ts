/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StreamMetricsRequest = {
  /**
   * Basin name.
   */
  basin: string;
  /**
   * Stream name.
   */
  stream: string;
};

/** @internal */
export const StreamMetricsRequest$inboundSchema: z.ZodType<
  StreamMetricsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  basin: z.string(),
  stream: z.string(),
});

/** @internal */
export type StreamMetricsRequest$Outbound = {
  basin: string;
  stream: string;
};

/** @internal */
export const StreamMetricsRequest$outboundSchema: z.ZodType<
  StreamMetricsRequest$Outbound,
  z.ZodTypeDef,
  StreamMetricsRequest
> = z.object({
  basin: z.string(),
  stream: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamMetricsRequest$ {
  /** @deprecated use `StreamMetricsRequest$inboundSchema` instead. */
  export const inboundSchema = StreamMetricsRequest$inboundSchema;
  /** @deprecated use `StreamMetricsRequest$outboundSchema` instead. */
  export const outboundSchema = StreamMetricsRequest$outboundSchema;
  /** @deprecated use `StreamMetricsRequest$Outbound` instead. */
  export type Outbound = StreamMetricsRequest$Outbound;
}

export function streamMetricsRequestToJSON(
  streamMetricsRequest: StreamMetricsRequest,
): string {
  return JSON.stringify(
    StreamMetricsRequest$outboundSchema.parse(streamMetricsRequest),
  );
}

export function streamMetricsRequestFromJSON(
  jsonString: string,
): SafeParseResult<StreamMetricsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamMetricsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamMetricsRequest' from JSON`,
  );
}
