/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReconfigureBasinRequest = {
  /**
   * Name of the basin.
   */
  basin: string;
  basinConfig: components.BasinConfig;
};

export type ReconfigureBasinResponse = {
  httpMeta: components.HTTPMetadata;
  basinConfig?: components.BasinConfig | undefined;
};

/** @internal */
export const ReconfigureBasinRequest$inboundSchema: z.ZodType<
  ReconfigureBasinRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  basin: z.string(),
  BasinConfig: components.BasinConfig$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "BasinConfig": "basinConfig",
  });
});

/** @internal */
export type ReconfigureBasinRequest$Outbound = {
  basin: string;
  BasinConfig: components.BasinConfig$Outbound;
};

/** @internal */
export const ReconfigureBasinRequest$outboundSchema: z.ZodType<
  ReconfigureBasinRequest$Outbound,
  z.ZodTypeDef,
  ReconfigureBasinRequest
> = z.object({
  basin: z.string(),
  basinConfig: components.BasinConfig$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    basinConfig: "BasinConfig",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReconfigureBasinRequest$ {
  /** @deprecated use `ReconfigureBasinRequest$inboundSchema` instead. */
  export const inboundSchema = ReconfigureBasinRequest$inboundSchema;
  /** @deprecated use `ReconfigureBasinRequest$outboundSchema` instead. */
  export const outboundSchema = ReconfigureBasinRequest$outboundSchema;
  /** @deprecated use `ReconfigureBasinRequest$Outbound` instead. */
  export type Outbound = ReconfigureBasinRequest$Outbound;
}

export function reconfigureBasinRequestToJSON(
  reconfigureBasinRequest: ReconfigureBasinRequest,
): string {
  return JSON.stringify(
    ReconfigureBasinRequest$outboundSchema.parse(reconfigureBasinRequest),
  );
}

export function reconfigureBasinRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReconfigureBasinRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReconfigureBasinRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReconfigureBasinRequest' from JSON`,
  );
}

/** @internal */
export const ReconfigureBasinResponse$inboundSchema: z.ZodType<
  ReconfigureBasinResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  BasinConfig: components.BasinConfig$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "BasinConfig": "basinConfig",
  });
});

/** @internal */
export type ReconfigureBasinResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  BasinConfig?: components.BasinConfig$Outbound | undefined;
};

/** @internal */
export const ReconfigureBasinResponse$outboundSchema: z.ZodType<
  ReconfigureBasinResponse$Outbound,
  z.ZodTypeDef,
  ReconfigureBasinResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  basinConfig: components.BasinConfig$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    basinConfig: "BasinConfig",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReconfigureBasinResponse$ {
  /** @deprecated use `ReconfigureBasinResponse$inboundSchema` instead. */
  export const inboundSchema = ReconfigureBasinResponse$inboundSchema;
  /** @deprecated use `ReconfigureBasinResponse$outboundSchema` instead. */
  export const outboundSchema = ReconfigureBasinResponse$outboundSchema;
  /** @deprecated use `ReconfigureBasinResponse$Outbound` instead. */
  export type Outbound = ReconfigureBasinResponse$Outbound;
}

export function reconfigureBasinResponseToJSON(
  reconfigureBasinResponse: ReconfigureBasinResponse,
): string {
  return JSON.stringify(
    ReconfigureBasinResponse$outboundSchema.parse(reconfigureBasinResponse),
  );
}

export function reconfigureBasinResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReconfigureBasinResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReconfigureBasinResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReconfigureBasinResponse' from JSON`,
  );
}
