/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateBasinRequest = {
  /**
   * Name of the basin.
   */
  basin: string;
  s2RequestToken?: string | undefined;
  createBasinRequest: components.CreateBasinRequest;
};

export type CreateBasinResponse = {
  httpMeta: components.HTTPMetadata;
  basinInfo?: components.BasinInfo | undefined;
};

/** @internal */
export const CreateBasinRequest$inboundSchema: z.ZodType<
  CreateBasinRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  basin: z.string(),
  "s2-request-token": z.string().optional(),
  CreateBasinRequest: components.CreateBasinRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "s2-request-token": "s2RequestToken",
    "CreateBasinRequest": "createBasinRequest",
  });
});

/** @internal */
export type CreateBasinRequest$Outbound = {
  basin: string;
  "s2-request-token"?: string | undefined;
  CreateBasinRequest: components.CreateBasinRequest$Outbound;
};

/** @internal */
export const CreateBasinRequest$outboundSchema: z.ZodType<
  CreateBasinRequest$Outbound,
  z.ZodTypeDef,
  CreateBasinRequest
> = z.object({
  basin: z.string(),
  s2RequestToken: z.string().optional(),
  createBasinRequest: components.CreateBasinRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    s2RequestToken: "s2-request-token",
    createBasinRequest: "CreateBasinRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBasinRequest$ {
  /** @deprecated use `CreateBasinRequest$inboundSchema` instead. */
  export const inboundSchema = CreateBasinRequest$inboundSchema;
  /** @deprecated use `CreateBasinRequest$outboundSchema` instead. */
  export const outboundSchema = CreateBasinRequest$outboundSchema;
  /** @deprecated use `CreateBasinRequest$Outbound` instead. */
  export type Outbound = CreateBasinRequest$Outbound;
}

export function createBasinRequestToJSON(
  createBasinRequest: CreateBasinRequest,
): string {
  return JSON.stringify(
    CreateBasinRequest$outboundSchema.parse(createBasinRequest),
  );
}

export function createBasinRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateBasinRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBasinRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBasinRequest' from JSON`,
  );
}

/** @internal */
export const CreateBasinResponse$inboundSchema: z.ZodType<
  CreateBasinResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  BasinInfo: components.BasinInfo$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "BasinInfo": "basinInfo",
  });
});

/** @internal */
export type CreateBasinResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  BasinInfo?: components.BasinInfo$Outbound | undefined;
};

/** @internal */
export const CreateBasinResponse$outboundSchema: z.ZodType<
  CreateBasinResponse$Outbound,
  z.ZodTypeDef,
  CreateBasinResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  basinInfo: components.BasinInfo$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    basinInfo: "BasinInfo",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBasinResponse$ {
  /** @deprecated use `CreateBasinResponse$inboundSchema` instead. */
  export const inboundSchema = CreateBasinResponse$inboundSchema;
  /** @deprecated use `CreateBasinResponse$outboundSchema` instead. */
  export const outboundSchema = CreateBasinResponse$outboundSchema;
  /** @deprecated use `CreateBasinResponse$Outbound` instead. */
  export type Outbound = CreateBasinResponse$Outbound;
}

export function createBasinResponseToJSON(
  createBasinResponse: CreateBasinResponse,
): string {
  return JSON.stringify(
    CreateBasinResponse$outboundSchema.parse(createBasinResponse),
  );
}

export function createBasinResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateBasinResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBasinResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBasinResponse' from JSON`,
  );
}
