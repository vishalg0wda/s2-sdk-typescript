/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountMetricsRequest = {
  /**
   * Metric type to return.
   */
  set: components.AccountMetricSet;
  /**
   * Start timestamp, in Unix epoch seconds, if applicable for metric set.
   */
  start?: number | undefined;
  /**
   * End timestamp, in Unix epoch seconds, if applicable for metric set.
   */
  end?: number | undefined;
  /**
   * For timeseries metric sets, the interval to aggregate over.
   */
  interval?: components.TimeseriesInterval | undefined;
};

/** @internal */
export const AccountMetricsRequest$inboundSchema: z.ZodType<
  AccountMetricsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  set: components.AccountMetricSet$inboundSchema,
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  interval: components.TimeseriesInterval$inboundSchema.optional(),
});

/** @internal */
export type AccountMetricsRequest$Outbound = {
  set: string;
  start?: number | undefined;
  end?: number | undefined;
  interval?: string | undefined;
};

/** @internal */
export const AccountMetricsRequest$outboundSchema: z.ZodType<
  AccountMetricsRequest$Outbound,
  z.ZodTypeDef,
  AccountMetricsRequest
> = z.object({
  set: components.AccountMetricSet$outboundSchema,
  start: z.number().int().optional(),
  end: z.number().int().optional(),
  interval: components.TimeseriesInterval$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountMetricsRequest$ {
  /** @deprecated use `AccountMetricsRequest$inboundSchema` instead. */
  export const inboundSchema = AccountMetricsRequest$inboundSchema;
  /** @deprecated use `AccountMetricsRequest$outboundSchema` instead. */
  export const outboundSchema = AccountMetricsRequest$outboundSchema;
  /** @deprecated use `AccountMetricsRequest$Outbound` instead. */
  export type Outbound = AccountMetricsRequest$Outbound;
}

export function accountMetricsRequestToJSON(
  accountMetricsRequest: AccountMetricsRequest,
): string {
  return JSON.stringify(
    AccountMetricsRequest$outboundSchema.parse(accountMetricsRequest),
  );
}

export function accountMetricsRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountMetricsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountMetricsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountMetricsRequest' from JSON`,
  );
}
