/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAccessTokensRequest = {
  /**
   * Filter to access tokens whose ID begins with this prefix.
   */
  prefix?: string | undefined;
  /**
   * Filter to access tokens whose ID lexicographically starts after this string.
   */
  startAfter?: string | undefined;
  /**
   * Number of results, up to a maximum of 1000.
   */
  limit?: number | undefined;
};

/** @internal */
export const ListAccessTokensRequest$inboundSchema: z.ZodType<
  ListAccessTokensRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  prefix: z.string().default(""),
  start_after: z.string().default(""),
  limit: z.number().int().default(1000),
}).transform((v) => {
  return remap$(v, {
    "start_after": "startAfter",
  });
});

/** @internal */
export type ListAccessTokensRequest$Outbound = {
  prefix: string;
  start_after: string;
  limit: number;
};

/** @internal */
export const ListAccessTokensRequest$outboundSchema: z.ZodType<
  ListAccessTokensRequest$Outbound,
  z.ZodTypeDef,
  ListAccessTokensRequest
> = z.object({
  prefix: z.string().default(""),
  startAfter: z.string().default(""),
  limit: z.number().int().default(1000),
}).transform((v) => {
  return remap$(v, {
    startAfter: "start_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccessTokensRequest$ {
  /** @deprecated use `ListAccessTokensRequest$inboundSchema` instead. */
  export const inboundSchema = ListAccessTokensRequest$inboundSchema;
  /** @deprecated use `ListAccessTokensRequest$outboundSchema` instead. */
  export const outboundSchema = ListAccessTokensRequest$outboundSchema;
  /** @deprecated use `ListAccessTokensRequest$Outbound` instead. */
  export type Outbound = ListAccessTokensRequest$Outbound;
}

export function listAccessTokensRequestToJSON(
  listAccessTokensRequest: ListAccessTokensRequest,
): string {
  return JSON.stringify(
    ListAccessTokensRequest$outboundSchema.parse(listAccessTokensRequest),
  );
}

export function listAccessTokensRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAccessTokensRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAccessTokensRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccessTokensRequest' from JSON`,
  );
}
