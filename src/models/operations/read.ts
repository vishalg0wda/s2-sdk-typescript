/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ReadServerList = [
  /**
   * Directly access the basin
   */
  "https://{basin}.b.aws.s2.dev/v1alpha",
] as const;

/**
 * Limit on how many records can be returned upto a maximum of 1000, or 1MiB of metered bytes.
 */
export type Limit = {
  /**
   * Metered bytes limit.
   */
  bytes?: number | null | undefined;
  /**
   * Record count limit.
   */
  count?: number | null | undefined;
};

export const One = {
  Json: "json",
  JsonBinsafe: "json-binsafe",
} as const;
export type One = ClosedEnum<typeof One>;

/**
 * json: utf-8 plaintext data.
 *
 * @remarks
 * json-binsafe: base64 encoded binary data.
 */
export type S2Format = One;

export type ReadRequest = {
  /**
   * Starting sequence number (inclusive).
   */
  startSeqNum?: number | undefined;
  /**
   * Limit on how many records can be returned upto a maximum of 1000, or 1MiB of metered bytes.
   */
  limit?: Limit | undefined;
  /**
   * json: utf-8 plaintext data.
   *
   * @remarks
   * json-binsafe: base64 encoded binary data.
   */
  s2Format?: One | undefined;
  /**
   * Name of the stream.
   */
  stream: string;
};

/** @internal */
export const Limit$inboundSchema: z.ZodType<Limit, z.ZodTypeDef, unknown> = z
  .object({
    bytes: z.nullable(z.number().int()).optional(),
    count: z.nullable(z.number().int()).optional(),
  });

/** @internal */
export type Limit$Outbound = {
  bytes?: number | null | undefined;
  count?: number | null | undefined;
};

/** @internal */
export const Limit$outboundSchema: z.ZodType<
  Limit$Outbound,
  z.ZodTypeDef,
  Limit
> = z.object({
  bytes: z.nullable(z.number().int()).optional(),
  count: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Limit$ {
  /** @deprecated use `Limit$inboundSchema` instead. */
  export const inboundSchema = Limit$inboundSchema;
  /** @deprecated use `Limit$outboundSchema` instead. */
  export const outboundSchema = Limit$outboundSchema;
  /** @deprecated use `Limit$Outbound` instead. */
  export type Outbound = Limit$Outbound;
}

export function limitToJSON(limit: Limit): string {
  return JSON.stringify(Limit$outboundSchema.parse(limit));
}

export function limitFromJSON(
  jsonString: string,
): SafeParseResult<Limit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Limit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Limit' from JSON`,
  );
}

/** @internal */
export const One$inboundSchema: z.ZodNativeEnum<typeof One> = z.nativeEnum(One);

/** @internal */
export const One$outboundSchema: z.ZodNativeEnum<typeof One> =
  One$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
}

/** @internal */
export const S2Format$inboundSchema: z.ZodType<
  S2Format,
  z.ZodTypeDef,
  unknown
> = One$inboundSchema;

/** @internal */
export type S2Format$Outbound = string;

/** @internal */
export const S2Format$outboundSchema: z.ZodType<
  S2Format$Outbound,
  z.ZodTypeDef,
  S2Format
> = One$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace S2Format$ {
  /** @deprecated use `S2Format$inboundSchema` instead. */
  export const inboundSchema = S2Format$inboundSchema;
  /** @deprecated use `S2Format$outboundSchema` instead. */
  export const outboundSchema = S2Format$outboundSchema;
  /** @deprecated use `S2Format$Outbound` instead. */
  export type Outbound = S2Format$Outbound;
}

export function s2FormatToJSON(s2Format: S2Format): string {
  return JSON.stringify(S2Format$outboundSchema.parse(s2Format));
}

export function s2FormatFromJSON(
  jsonString: string,
): SafeParseResult<S2Format, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => S2Format$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'S2Format' from JSON`,
  );
}

/** @internal */
export const ReadRequest$inboundSchema: z.ZodType<
  ReadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_seq_num: z.number().int().optional(),
  limit: z.lazy(() => Limit$inboundSchema).optional(),
  "s2-format": One$inboundSchema.optional(),
  stream: z.string(),
}).transform((v) => {
  return remap$(v, {
    "start_seq_num": "startSeqNum",
    "s2-format": "s2Format",
  });
});

/** @internal */
export type ReadRequest$Outbound = {
  start_seq_num?: number | undefined;
  limit?: Limit$Outbound | undefined;
  "s2-format"?: string | undefined;
  stream: string;
};

/** @internal */
export const ReadRequest$outboundSchema: z.ZodType<
  ReadRequest$Outbound,
  z.ZodTypeDef,
  ReadRequest
> = z.object({
  startSeqNum: z.number().int().optional(),
  limit: z.lazy(() => Limit$outboundSchema).optional(),
  s2Format: One$outboundSchema.optional(),
  stream: z.string(),
}).transform((v) => {
  return remap$(v, {
    startSeqNum: "start_seq_num",
    s2Format: "s2-format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadRequest$ {
  /** @deprecated use `ReadRequest$inboundSchema` instead. */
  export const inboundSchema = ReadRequest$inboundSchema;
  /** @deprecated use `ReadRequest$outboundSchema` instead. */
  export const outboundSchema = ReadRequest$outboundSchema;
  /** @deprecated use `ReadRequest$Outbound` instead. */
  export type Outbound = ReadRequest$Outbound;
}

export function readRequestToJSON(readRequest: ReadRequest): string {
  return JSON.stringify(ReadRequest$outboundSchema.parse(readRequest));
}

export function readRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadRequest' from JSON`,
  );
}
