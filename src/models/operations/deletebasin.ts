/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteBasinRequest = {
  /**
   * Basin name.
   */
  basin: string;
};

/** @internal */
export const DeleteBasinRequest$inboundSchema: z.ZodType<
  DeleteBasinRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  basin: z.string(),
});

/** @internal */
export type DeleteBasinRequest$Outbound = {
  basin: string;
};

/** @internal */
export const DeleteBasinRequest$outboundSchema: z.ZodType<
  DeleteBasinRequest$Outbound,
  z.ZodTypeDef,
  DeleteBasinRequest
> = z.object({
  basin: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBasinRequest$ {
  /** @deprecated use `DeleteBasinRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteBasinRequest$inboundSchema;
  /** @deprecated use `DeleteBasinRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteBasinRequest$outboundSchema;
  /** @deprecated use `DeleteBasinRequest$Outbound` instead. */
  export type Outbound = DeleteBasinRequest$Outbound;
}

export function deleteBasinRequestToJSON(
  deleteBasinRequest: DeleteBasinRequest,
): string {
  return JSON.stringify(
    DeleteBasinRequest$outboundSchema.parse(deleteBasinRequest),
  );
}

export function deleteBasinRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteBasinRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBasinRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBasinRequest' from JSON`,
  );
}
