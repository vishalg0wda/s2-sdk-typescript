/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListStreamsServerList = [
  /**
   * Endpoint for the basin
   */
  "https://.b.aws.s2.dev/v1",
] as const;

export type ListStreamsRequest = {
  /**
   * List stream names that begin with this prefix.
   */
  prefix?: string | undefined;
  /**
   * Only return stream names that lexicographically start after this name.
   *
   * @remarks
   * This can be the last stream name seen in a previous listing, to continue from there.
   * It must be greater than or equal to the prefix if specified.
   */
  startAfter?: string | undefined;
  /**
   * Number of results, up to a maximum of 1000.
   */
  limit?: number | undefined;
};

export type ListStreamsResponse = {
  result: components.ListStreamsResponse;
};

/** @internal */
export const ListStreamsRequest$inboundSchema: z.ZodType<
  ListStreamsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  prefix: z.string().default(""),
  start_after: z.string().default(""),
  limit: z.number().int().default(1000),
}).transform((v) => {
  return remap$(v, {
    "start_after": "startAfter",
  });
});

/** @internal */
export type ListStreamsRequest$Outbound = {
  prefix: string;
  start_after: string;
  limit: number;
};

/** @internal */
export const ListStreamsRequest$outboundSchema: z.ZodType<
  ListStreamsRequest$Outbound,
  z.ZodTypeDef,
  ListStreamsRequest
> = z.object({
  prefix: z.string().default(""),
  startAfter: z.string().default(""),
  limit: z.number().int().default(1000),
}).transform((v) => {
  return remap$(v, {
    startAfter: "start_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListStreamsRequest$ {
  /** @deprecated use `ListStreamsRequest$inboundSchema` instead. */
  export const inboundSchema = ListStreamsRequest$inboundSchema;
  /** @deprecated use `ListStreamsRequest$outboundSchema` instead. */
  export const outboundSchema = ListStreamsRequest$outboundSchema;
  /** @deprecated use `ListStreamsRequest$Outbound` instead. */
  export type Outbound = ListStreamsRequest$Outbound;
}

export function listStreamsRequestToJSON(
  listStreamsRequest: ListStreamsRequest,
): string {
  return JSON.stringify(
    ListStreamsRequest$outboundSchema.parse(listStreamsRequest),
  );
}

export function listStreamsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListStreamsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListStreamsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListStreamsRequest' from JSON`,
  );
}

/** @internal */
export const ListStreamsResponse$inboundSchema: z.ZodType<
  ListStreamsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.ListStreamsResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListStreamsResponse$Outbound = {
  Result: components.ListStreamsResponse$Outbound;
};

/** @internal */
export const ListStreamsResponse$outboundSchema: z.ZodType<
  ListStreamsResponse$Outbound,
  z.ZodTypeDef,
  ListStreamsResponse
> = z.object({
  result: components.ListStreamsResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListStreamsResponse$ {
  /** @deprecated use `ListStreamsResponse$inboundSchema` instead. */
  export const inboundSchema = ListStreamsResponse$inboundSchema;
  /** @deprecated use `ListStreamsResponse$outboundSchema` instead. */
  export const outboundSchema = ListStreamsResponse$outboundSchema;
  /** @deprecated use `ListStreamsResponse$Outbound` instead. */
  export type Outbound = ListStreamsResponse$Outbound;
}

export function listStreamsResponseToJSON(
  listStreamsResponse: ListStreamsResponse,
): string {
  return JSON.stringify(
    ListStreamsResponse$outboundSchema.parse(listStreamsResponse),
  );
}

export function listStreamsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListStreamsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListStreamsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListStreamsResponse' from JSON`,
  );
}
