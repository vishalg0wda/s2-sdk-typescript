/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AppendServerList = [
  /**
   * Endpoint for the basin
   */
  "https://{basin}.b.aws.s2.dev/v1",
] as const;

export type AppendRequest = {
  /**
   * Stream name, which must be unique within the basin.
   *
   * @remarks
   * It can be an arbitrary string up to 512 characters.
   */
  stream: string;
  /**
   * Recognized when the Content-Type is `application/json`.
   *
   * @remarks
   * json: UTF-8 data
   * json-binsafe: Base64-encoded binary data
   */
  s2Format?: components.S2Format | undefined;
  appendInput: components.AppendInput;
};

/** @internal */
export const AppendRequest$inboundSchema: z.ZodType<
  AppendRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.string(),
  "s2-format": components.S2Format$inboundSchema.optional(),
  AppendInput: components.AppendInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "s2-format": "s2Format",
    "AppendInput": "appendInput",
  });
});

/** @internal */
export type AppendRequest$Outbound = {
  stream: string;
  "s2-format"?: string | undefined;
  AppendInput: components.AppendInput$Outbound;
};

/** @internal */
export const AppendRequest$outboundSchema: z.ZodType<
  AppendRequest$Outbound,
  z.ZodTypeDef,
  AppendRequest
> = z.object({
  stream: z.string(),
  s2Format: components.S2Format$outboundSchema.optional(),
  appendInput: components.AppendInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    s2Format: "s2-format",
    appendInput: "AppendInput",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppendRequest$ {
  /** @deprecated use `AppendRequest$inboundSchema` instead. */
  export const inboundSchema = AppendRequest$inboundSchema;
  /** @deprecated use `AppendRequest$outboundSchema` instead. */
  export const outboundSchema = AppendRequest$outboundSchema;
  /** @deprecated use `AppendRequest$Outbound` instead. */
  export type Outbound = AppendRequest$Outbound;
}

export function appendRequestToJSON(appendRequest: AppendRequest): string {
  return JSON.stringify(AppendRequest$outboundSchema.parse(appendRequest));
}

export function appendRequestFromJSON(
  jsonString: string,
): SafeParseResult<AppendRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppendRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppendRequest' from JSON`,
  );
}
