/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { basinsCreateBasin } from "../funcs/basinsCreateBasin.js";
import { basinsCreateOrReconfigureBasin } from "../funcs/basinsCreateOrReconfigureBasin.js";
import { basinsDeleteBasin } from "../funcs/basinsDeleteBasin.js";
import { basinsGetBasinConfig } from "../funcs/basinsGetBasinConfig.js";
import { basinsListBasins } from "../funcs/basinsListBasins.js";
import { basinsReconfigureBasin } from "../funcs/basinsReconfigureBasin.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Basins extends ClientSDK {
  /**
   * List basins.
   */
  async listBasins(
    request: operations.ListBasinsRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<operations.ListBasinsResponse, { cursor: string }>> {
    return unwrapResultIterator(basinsListBasins(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a basin.
   */
  async createBasin(
    request: components.CreateBasinRequest,
    options?: RequestOptions,
  ): Promise<components.BasinInfo> {
    return unwrapAsync(basinsCreateBasin(
      this,
      request,
      options,
    ));
  }

  /**
   * Get basin config.
   */
  async getBasinConfig(
    request: operations.GetBasinConfigRequest,
    options?: RequestOptions,
  ): Promise<components.BasinConfig> {
    return unwrapAsync(basinsGetBasinConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Create or reconfigure a basin.
   */
  async createOrReconfigureBasin(
    request: operations.CreateOrReconfigureBasinRequest,
    options?: RequestOptions,
  ): Promise<components.BasinInfo | undefined> {
    return unwrapAsync(basinsCreateOrReconfigureBasin(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a basin.
   */
  async deleteBasin(
    request: operations.DeleteBasinRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(basinsDeleteBasin(
      this,
      request,
      options,
    ));
  }

  /**
   * Reconfigure a basin.
   */
  async reconfigureBasin(
    request: operations.ReconfigureBasinRequest,
    options?: RequestOptions,
  ): Promise<components.BasinConfig> {
    return unwrapAsync(basinsReconfigureBasin(
      this,
      request,
      options,
    ));
  }
}
