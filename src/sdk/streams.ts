/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { streamsCreateOrReconfigureStream } from "../funcs/streamsCreateOrReconfigureStream.js";
import { streamsDeleteStream } from "../funcs/streamsDeleteStream.js";
import { streamsGetStreamConfig } from "../funcs/streamsGetStreamConfig.js";
import { streamsListStreams } from "../funcs/streamsListStreams.js";
import { streamsReconfigureStream } from "../funcs/streamsReconfigureStream.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Streams extends ClientSDK {
  /**
   * List streams.
   */
  async listStreams(
    request: operations.ListStreamsRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<operations.ListStreamsResponse, { cursor: string }>> {
    return unwrapResultIterator(streamsListStreams(
      this,
      request,
      options,
    ));
  }

  /**
   * Get stream configuration.
   */
  async getStreamConfig(
    request: operations.GetStreamConfigRequest,
    options?: RequestOptions,
  ): Promise<components.StreamConfig> {
    return unwrapAsync(streamsGetStreamConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Create or reconfigure a stream.
   */
  async createOrReconfigureStream(
    request: operations.CreateOrReconfigureStreamRequest,
    options?: RequestOptions,
  ): Promise<components.StreamInfo | undefined> {
    return unwrapAsync(streamsCreateOrReconfigureStream(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a stream.
   */
  async deleteStream(
    request: operations.DeleteStreamRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(streamsDeleteStream(
      this,
      request,
      options,
    ));
  }

  /**
   * Reconfigure a stream.
   */
  async reconfigureStream(
    request: operations.ReconfigureStreamRequest,
    options?: RequestOptions,
  ): Promise<components.StreamConfig> {
    return unwrapAsync(streamsReconfigureStream(
      this,
      request,
      options,
    ));
  }
}
