/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { basinCreateStream } from "../funcs/basinCreateStream.js";
import { basinDeleteStream } from "../funcs/basinDeleteStream.js";
import { basinGetStreamConfig } from "../funcs/basinGetStreamConfig.js";
import { basinListStreams } from "../funcs/basinListStreams.js";
import { basinReconfigureStream } from "../funcs/basinReconfigureStream.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Basin extends ClientSDK {
  /**
   * List Streams.
   */
  async listStreams(
    request: operations.ListStreamsRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<operations.ListStreamsResponse, { cursor: string }>> {
    return unwrapResultIterator(basinListStreams(
      this,
      request,
      options,
    ));
  }

  /**
   * Get stream configuration.
   */
  async getStreamConfig(
    request: operations.GetStreamConfigRequest,
    options?: RequestOptions,
  ): Promise<components.StreamConfig> {
    return unwrapAsync(basinGetStreamConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a stream.
   */
  async createStream(
    request: operations.CreateStreamRequest,
    options?: RequestOptions,
  ): Promise<components.StreamInfo> {
    return unwrapAsync(basinCreateStream(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a stream.
   */
  async deleteStream(
    request: operations.DeleteStreamRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(basinDeleteStream(
      this,
      request,
      options,
    ));
  }

  /**
   * Update stream configuration.
   */
  async reconfigureStream(
    request: operations.ReconfigureStreamRequest,
    options?: RequestOptions,
  ): Promise<components.ReconfigureStreamResponse> {
    return unwrapAsync(basinReconfigureStream(
      this,
      request,
      options,
    ));
  }
}
