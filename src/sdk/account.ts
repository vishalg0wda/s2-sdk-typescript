/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountCreateBasin } from "../funcs/accountCreateBasin.js";
import { accountDeleteBasin } from "../funcs/accountDeleteBasin.js";
import { accountGetBasinConfig } from "../funcs/accountGetBasinConfig.js";
import { accountListBasins } from "../funcs/accountListBasins.js";
import { accountReconfigureBasin } from "../funcs/accountReconfigureBasin.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Account extends ClientSDK {
  /**
   * List basins.
   */
  async listBasins(
    request: operations.ListBasinsRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<operations.ListBasinsResponse, { cursor: string }>> {
    return unwrapResultIterator(accountListBasins(
      this,
      request,
      options,
    ));
  }

  /**
   * Get basin configuration.
   */
  async getBasinConfig(
    request: operations.GetBasinConfigRequest,
    options?: RequestOptions,
  ): Promise<operations.GetBasinConfigResponse> {
    return unwrapAsync(accountGetBasinConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new basin.
   */
  async createBasin(
    request: operations.CreateBasinRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateBasinResponse> {
    return unwrapAsync(accountCreateBasin(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a basin.
   */
  async deleteBasin(
    request: operations.DeleteBasinRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteBasinResponse> {
    return unwrapAsync(accountDeleteBasin(
      this,
      request,
      options,
    ));
  }

  /**
   * Update basin configuration.
   */
  async reconfigureBasin(
    request: operations.ReconfigureBasinRequest,
    options?: RequestOptions,
  ): Promise<operations.ReconfigureBasinResponse> {
    return unwrapAsync(accountReconfigureBasin(
      this,
      request,
      options,
    ));
  }
}
