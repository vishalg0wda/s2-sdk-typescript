/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { S2Core } from "../core.js";
import { encodeFormQuery, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { S2Error } from "../models/errors/s2error.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { ReadServerList } from "../models/operations/read.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

export enum ReadAcceptEnum {
  applicationJson = "application/json",
  textEventStream = "text/event-stream",
}

const oldConsoleLog = console.log.bind(console);

console.log = (...args: any[]) => {
  // Add a timestamp to the beginning of the message
  const timestamp = new Date().toISOString();
  oldConsoleLog(`[${timestamp}]`, ...args);
};

/**
 * Read records.
 */
export function recordsRead(
  client: S2Core,
  request: operations.ReadRequest,
  options?: RequestOptions & { acceptHeaderOverride?: ReadAcceptEnum },
): APIPromise<
  Result<
    operations.ReadResponse,
    | errors.ErrorResponse
    | errors.TailResponse
    | S2Error
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: S2Core,
  request: operations.ReadRequest,
  options?: RequestOptions & { acceptHeaderOverride?: ReadAcceptEnum },
): Promise<
  [
    Result<
      operations.ReadResponse,
      | errors.ErrorResponse
      | errors.TailResponse
      | S2Error
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) => operations.ReadRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = null;

  const baseURL = options?.serverURL
    || pathToFunc(ReadServerList[0], { charEncoding: "percent" })({
      basin: "",
    });

  const pathParams = {
    stream: encodeSimple("stream", payload.stream, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/streams/{stream}/records")(pathParams);

  const query = encodeFormQuery({
    "bytes": payload.bytes,
    "count": payload.count,
    "seq_num": payload.seq_num,
    "tail_offset": payload.tail_offset,
    "timestamp": payload.timestamp,
    "until": payload.until,
  });

  const headers = new Headers(compactMap({
    Accept: options?.acceptHeaderOverride
      || "application/json;q=1, text/event-stream;q=0",
    "s2-basin": encodeSimple("s2-basin", payload["s2-basin"], {
      explode: false,
      charEncoding: "none",
    }),
    "s2-format": encodeSimple("s2-format", payload["s2-format"], {
      explode: false,
      charEncoding: "none",
    }),
  }));

  const secConfig = await extractSecurity(client._options.accessToken);
  const securityInput = secConfig == null ? {} : { accessToken: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: baseURL ?? "",
    operationID: "read",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.accessToken,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    baseURL: baseURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "404", "409", "416", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.ReadResponse,
    | errors.ErrorResponse
    | errors.TailResponse
    | S2Error
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, operations.ReadResponse$inboundSchema),
    M.sse(200, operations.ReadResponse$inboundSchema, {
      sseSentinel: "[DONE]",
    }),
    M.jsonErr([400, 401, 404, 409], errors.ErrorResponse$inboundSchema),
    M.jsonErr(416, errors.TailResponse$inboundSchema),
    M.jsonErr(500, errors.ErrorResponse$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
